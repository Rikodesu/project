// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_171_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        Weights_address1,
        Weights_ce1,
        Weights_q1,
        OutPadConv6_address0,
        OutPadConv6_ce0,
        OutPadConv6_q0,
        OutConv6_address0,
        OutConv6_ce0,
        OutConv6_we0,
        OutConv6_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [15:0] Weights_q0;
output  [13:0] Weights_address1;
output   Weights_ce1;
input  [15:0] Weights_q1;
output  [9:0] OutPadConv6_address0;
output   OutPadConv6_ce0;
input  [15:0] OutPadConv6_q0;
output  [10:0] OutConv6_address0;
output   OutConv6_ce0;
output   OutConv6_we0;
output  [15:0] OutConv6_d0;

reg ap_idle;
reg Weights_ce0;
reg Weights_ce1;
reg OutPadConv6_ce0;
reg OutConv6_ce0;
reg OutConv6_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln171_fu_232_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln173_fu_244_p2;
reg   [0:0] icmp_ln173_reg_789;
reg   [0:0] icmp_ln173_reg_789_pp0_iter2_reg;
reg   [0:0] icmp_ln173_reg_789_pp0_iter3_reg;
wire   [0:0] xor_ln171_fu_250_p2;
reg   [0:0] xor_ln171_reg_797;
wire   [0:0] icmp_ln176_fu_256_p2;
reg   [0:0] icmp_ln176_reg_802;
wire   [0:0] and_ln171_1_fu_262_p2;
reg   [0:0] and_ln171_1_reg_807;
reg   [0:0] and_ln171_1_reg_807_pp0_iter2_reg;
reg   [0:0] and_ln171_1_reg_807_pp0_iter3_reg;
wire   [0:0] or_ln173_fu_268_p2;
reg   [0:0] or_ln173_reg_813;
reg   [0:0] or_ln173_reg_813_pp0_iter2_reg;
reg   [0:0] or_ln173_reg_813_pp0_iter3_reg;
reg   [0:0] or_ln173_reg_813_pp0_iter4_reg;
reg   [0:0] or_ln173_reg_813_pp0_iter5_reg;
reg   [0:0] or_ln173_reg_813_pp0_iter6_reg;
reg   [0:0] or_ln173_reg_813_pp0_iter7_reg;
wire   [2:0] select_ln174_fu_373_p3;
reg   [2:0] select_ln174_reg_819;
reg   [2:0] select_ln174_reg_819_pp0_iter3_reg;
reg   [2:0] select_ln174_reg_819_pp0_iter4_reg;
wire   [4:0] select_ln176_fu_381_p3;
reg   [4:0] select_ln176_reg_825;
reg   [4:0] select_ln176_reg_825_pp0_iter3_reg;
reg   [4:0] select_ln176_reg_825_pp0_iter4_reg;
wire   [3:0] empty_158_fu_393_p1;
reg   [3:0] empty_158_reg_835;
reg   [3:0] empty_158_reg_835_pp0_iter3_reg;
reg   [3:0] empty_158_reg_835_pp0_iter4_reg;
wire   [0:0] icmp_ln178_1_fu_403_p2;
reg   [0:0] icmp_ln178_1_reg_840;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter3_reg;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter4_reg;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter5_reg;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter6_reg;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter7_reg;
reg   [0:0] icmp_ln178_1_reg_840_pp0_iter8_reg;
wire   [0:0] icmp_ln176_1_fu_409_p2;
reg   [0:0] icmp_ln176_1_reg_844;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter3_reg;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter4_reg;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter5_reg;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter6_reg;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter7_reg;
reg   [0:0] icmp_ln176_1_reg_844_pp0_iter8_reg;
wire   [5:0] select_ln171_1_fu_444_p3;
reg   [5:0] select_ln171_1_reg_848;
reg   [5:0] select_ln171_1_reg_848_pp0_iter5_reg;
reg   [5:0] select_ln171_1_reg_848_pp0_iter6_reg;
wire   [5:0] select_ln173_1_fu_457_p3;
reg   [5:0] select_ln173_1_reg_853;
reg   [5:0] select_ln173_1_reg_853_pp0_iter5_reg;
reg   [5:0] select_ln173_1_reg_853_pp0_iter6_reg;
wire   [4:0] empty_fu_464_p1;
reg   [4:0] empty_reg_858;
reg   [4:0] empty_reg_858_pp0_iter5_reg;
reg   [4:0] empty_reg_858_pp0_iter6_reg;
wire   [10:0] add_ln181_1_fu_634_p2;
reg   [10:0] add_ln181_1_reg_896;
reg   [10:0] add_ln181_1_reg_896_pp0_iter8_reg;
reg  signed [15:0] Weights_load_reg_901;
wire   [63:0] zext_ln179_5_fu_572_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln179_1_fu_526_p1;
wire   [63:0] arrayidx45_sum_cast_fu_594_p1;
wire   [63:0] zext_ln181_1_fu_688_p1;
reg   [15:0] s_fu_100;
wire  signed [15:0] s_2_fu_661_p4;
reg   [15:0] ap_sig_allocacmp_s_load;
wire    ap_loop_init;
reg   [2:0] j_fu_104;
wire   [2:0] add_ln178_fu_397_p2;
reg   [4:0] k_fu_108;
reg   [7:0] indvar_flatten143_fu_112;
wire   [7:0] select_ln176_1_fu_280_p3;
reg   [5:0] y_fu_116;
reg   [12:0] indvar_flatten158_fu_120;
wire   [12:0] select_ln173_3_fu_294_p3;
reg   [5:0] n_fu_124;
reg   [16:0] indvar_flatten182_fu_128;
wire   [16:0] add_ln171_fu_238_p2;
wire   [7:0] add_ln176_1_fu_274_p2;
wire   [12:0] add_ln173_1_fu_288_p2;
wire   [0:0] xor_ln173_fu_336_p2;
wire   [0:0] icmp_ln178_fu_323_p2;
wire   [0:0] and_ln171_fu_346_p2;
wire   [0:0] or_ln173_1_fu_341_p2;
wire   [4:0] select_ln173_fu_329_p3;
wire   [0:0] and_ln173_fu_351_p2;
wire   [0:0] or_ln174_fu_363_p2;
wire   [0:0] or_ln174_1_fu_368_p2;
wire   [4:0] add_ln176_fu_357_p2;
wire   [5:0] add_ln171_1_fu_438_p2;
wire   [5:0] select_ln171_fu_431_p3;
wire   [5:0] add_ln173_fu_451_p2;
wire   [5:0] zext_ln178_2_fu_468_p1;
wire   [5:0] add_ln179_fu_471_p2;
wire   [10:0] p_shl_fu_491_p3;
wire   [5:0] p_shl20_fu_512_p3;
wire   [9:0] grp_fu_711_p3;
wire   [8:0] p_shl17_fu_502_p3;
wire   [8:0] zext_ln176_fu_509_p1;
wire   [8:0] add_ln179_2_fu_530_p2;
wire   [11:0] zext_ln179_2_fu_536_p1;
wire   [11:0] p_shl48_cast_fu_498_p1;
wire   [11:0] add_ln179_5_fu_540_p2;
wire   [11:0] zext_ln178_1_fu_523_p1;
wire   [11:0] add_ln179_6_fu_550_p2;
wire   [11:0] p_shl50_cast_fu_519_p1;
wire   [11:0] add_ln179_7_fu_556_p2;
wire   [12:0] zext_ln179_4_fu_562_p1;
wire   [12:0] zext_ln179_3_fu_546_p1;
wire   [12:0] add_ln179_3_fu_566_p2;
wire   [12:0] zext_ln171_fu_585_p1;
wire   [12:0] arrayidx45_sum_fu_588_p2;
wire   [9:0] p_shl18_fu_599_p3;
wire   [7:0] p_shl19_fu_610_p3;
wire   [8:0] zext_ln173_fu_617_p1;
wire   [8:0] zext_ln173_1_fu_621_p1;
wire   [8:0] add_ln181_3_fu_624_p2;
wire   [10:0] zext_ln181_fu_630_p1;
wire   [10:0] p_shl46_cast_fu_606_p1;
wire   [15:0] select_ln173_2_fu_643_p3;
wire  signed [23:0] s_2_fu_661_p1;
wire   [23:0] grp_fu_720_p3;
wire  signed [16:0] sext_ln181_fu_670_p1;
wire  signed [16:0] conv_i_i13_i93_i382_fu_658_p1;
wire   [16:0] add_ln181_fu_674_p2;
wire   [0:0] tmp_fu_680_p3;
wire   [15:0] add_ln181_2_fu_692_p2;
wire   [4:0] grp_fu_711_p0;
wire   [5:0] grp_fu_711_p1;
wire   [5:0] grp_fu_711_p2;
wire   [23:0] grp_fu_720_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_711_p00;
wire   [9:0] grp_fu_711_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 s_fu_100 = 16'd0;
#0 j_fu_104 = 3'd0;
#0 k_fu_108 = 5'd0;
#0 indvar_flatten143_fu_112 = 8'd0;
#0 y_fu_116 = 6'd0;
#0 indvar_flatten158_fu_120 = 13'd0;
#0 n_fu_124 = 6'd0;
#0 indvar_flatten182_fu_128 = 17'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_5ns_6ns_6ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 10 ))
mac_muladd_5ns_6ns_6ns_10_4_1_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_711_p0),
    .din1(grp_fu_711_p1),
    .din2(grp_fu_711_p2),
    .ce(1'b1),
    .dout(grp_fu_711_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv6_q0),
    .din1(Weights_q1),
    .din2(grp_fu_720_p2),
    .ce(1'b1),
    .dout(grp_fu_720_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten143_fu_112 <= 8'd0;
        end else if (((icmp_ln171_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten143_fu_112 <= select_ln176_1_fu_280_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten158_fu_120 <= 13'd0;
        end else if (((icmp_ln171_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten158_fu_120 <= select_ln173_3_fu_294_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten182_fu_128 <= 17'd0;
        end else if (((icmp_ln171_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten182_fu_128 <= add_ln171_fu_238_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_104 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_104 <= add_ln178_fu_397_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_fu_108 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_108 <= select_ln176_fu_381_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n_fu_124 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            n_fu_124 <= select_ln171_1_fu_444_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_fu_100 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
            s_fu_100 <= {{s_2_fu_661_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_116 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            y_fu_116 <= select_ln173_1_fu_457_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Weights_load_reg_901 <= Weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln181_1_reg_896 <= add_ln181_1_fu_634_p2;
        add_ln181_1_reg_896_pp0_iter8_reg <= add_ln181_1_reg_896;
        and_ln171_1_reg_807_pp0_iter2_reg <= and_ln171_1_reg_807;
        and_ln171_1_reg_807_pp0_iter3_reg <= and_ln171_1_reg_807_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        empty_158_reg_835 <= empty_158_fu_393_p1;
        empty_158_reg_835_pp0_iter3_reg <= empty_158_reg_835;
        empty_158_reg_835_pp0_iter4_reg <= empty_158_reg_835_pp0_iter3_reg;
        empty_reg_858 <= empty_fu_464_p1;
        empty_reg_858_pp0_iter5_reg <= empty_reg_858;
        empty_reg_858_pp0_iter6_reg <= empty_reg_858_pp0_iter5_reg;
        icmp_ln173_reg_789_pp0_iter2_reg <= icmp_ln173_reg_789;
        icmp_ln173_reg_789_pp0_iter3_reg <= icmp_ln173_reg_789_pp0_iter2_reg;
        icmp_ln176_1_reg_844 <= icmp_ln176_1_fu_409_p2;
        icmp_ln176_1_reg_844_pp0_iter3_reg <= icmp_ln176_1_reg_844;
        icmp_ln176_1_reg_844_pp0_iter4_reg <= icmp_ln176_1_reg_844_pp0_iter3_reg;
        icmp_ln176_1_reg_844_pp0_iter5_reg <= icmp_ln176_1_reg_844_pp0_iter4_reg;
        icmp_ln176_1_reg_844_pp0_iter6_reg <= icmp_ln176_1_reg_844_pp0_iter5_reg;
        icmp_ln176_1_reg_844_pp0_iter7_reg <= icmp_ln176_1_reg_844_pp0_iter6_reg;
        icmp_ln176_1_reg_844_pp0_iter8_reg <= icmp_ln176_1_reg_844_pp0_iter7_reg;
        icmp_ln178_1_reg_840 <= icmp_ln178_1_fu_403_p2;
        icmp_ln178_1_reg_840_pp0_iter3_reg <= icmp_ln178_1_reg_840;
        icmp_ln178_1_reg_840_pp0_iter4_reg <= icmp_ln178_1_reg_840_pp0_iter3_reg;
        icmp_ln178_1_reg_840_pp0_iter5_reg <= icmp_ln178_1_reg_840_pp0_iter4_reg;
        icmp_ln178_1_reg_840_pp0_iter6_reg <= icmp_ln178_1_reg_840_pp0_iter5_reg;
        icmp_ln178_1_reg_840_pp0_iter7_reg <= icmp_ln178_1_reg_840_pp0_iter6_reg;
        icmp_ln178_1_reg_840_pp0_iter8_reg <= icmp_ln178_1_reg_840_pp0_iter7_reg;
        or_ln173_reg_813_pp0_iter2_reg <= or_ln173_reg_813;
        or_ln173_reg_813_pp0_iter3_reg <= or_ln173_reg_813_pp0_iter2_reg;
        or_ln173_reg_813_pp0_iter4_reg <= or_ln173_reg_813_pp0_iter3_reg;
        or_ln173_reg_813_pp0_iter5_reg <= or_ln173_reg_813_pp0_iter4_reg;
        or_ln173_reg_813_pp0_iter6_reg <= or_ln173_reg_813_pp0_iter5_reg;
        or_ln173_reg_813_pp0_iter7_reg <= or_ln173_reg_813_pp0_iter6_reg;
        select_ln171_1_reg_848 <= select_ln171_1_fu_444_p3;
        select_ln171_1_reg_848_pp0_iter5_reg <= select_ln171_1_reg_848;
        select_ln171_1_reg_848_pp0_iter6_reg <= select_ln171_1_reg_848_pp0_iter5_reg;
        select_ln173_1_reg_853 <= select_ln173_1_fu_457_p3;
        select_ln173_1_reg_853_pp0_iter5_reg <= select_ln173_1_reg_853;
        select_ln173_1_reg_853_pp0_iter6_reg <= select_ln173_1_reg_853_pp0_iter5_reg;
        select_ln174_reg_819 <= select_ln174_fu_373_p3;
        select_ln174_reg_819_pp0_iter3_reg <= select_ln174_reg_819;
        select_ln174_reg_819_pp0_iter4_reg <= select_ln174_reg_819_pp0_iter3_reg;
        select_ln176_reg_825 <= select_ln176_fu_381_p3;
        select_ln176_reg_825_pp0_iter3_reg <= select_ln176_reg_825;
        select_ln176_reg_825_pp0_iter4_reg <= select_ln176_reg_825_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln171_1_reg_807 <= and_ln171_1_fu_262_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln173_reg_789 <= icmp_ln173_fu_244_p2;
        icmp_ln176_reg_802 <= icmp_ln176_fu_256_p2;
        or_ln173_reg_813 <= or_ln173_fu_268_p2;
        xor_ln171_reg_797 <= xor_ln171_fu_250_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        OutConv6_ce0 = 1'b1;
    end else begin
        OutConv6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln176_1_reg_844_pp0_iter8_reg == 1'd1) & (icmp_ln178_1_reg_840_pp0_iter8_reg == 1'd1))) begin
        OutConv6_we0 = 1'b1;
    end else begin
        OutConv6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        OutPadConv6_ce0 = 1'b1;
    end else begin
        OutPadConv6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        Weights_ce0 = 1'b1;
    end else begin
        Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Weights_ce1 = 1'b1;
    end else begin
        Weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_232_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_sig_allocacmp_s_load = {{s_2_fu_661_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_s_load = s_fu_100;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv6_address0 = zext_ln181_1_fu_688_p1;

assign OutConv6_d0 = ((tmp_fu_680_p3[0:0] == 1'b1) ? 16'd0 : add_ln181_2_fu_692_p2);

assign OutPadConv6_address0 = zext_ln179_1_fu_526_p1;

assign Weights_address0 = arrayidx45_sum_cast_fu_594_p1;

assign Weights_address1 = zext_ln179_5_fu_572_p1;

assign add_ln171_1_fu_438_p2 = (n_fu_124 + 6'd1);

assign add_ln171_fu_238_p2 = (indvar_flatten182_fu_128 + 17'd1);

assign add_ln173_1_fu_288_p2 = (indvar_flatten158_fu_120 + 13'd1);

assign add_ln173_fu_451_p2 = (select_ln171_fu_431_p3 + 6'd1);

assign add_ln176_1_fu_274_p2 = (indvar_flatten143_fu_112 + 8'd1);

assign add_ln176_fu_357_p2 = (select_ln173_fu_329_p3 + 5'd1);

assign add_ln178_fu_397_p2 = (select_ln174_fu_373_p3 + 3'd1);

assign add_ln179_2_fu_530_p2 = (p_shl17_fu_502_p3 + zext_ln176_fu_509_p1);

assign add_ln179_3_fu_566_p2 = (zext_ln179_4_fu_562_p1 + zext_ln179_3_fu_546_p1);

assign add_ln179_5_fu_540_p2 = (zext_ln179_2_fu_536_p1 + p_shl48_cast_fu_498_p1);

assign add_ln179_6_fu_550_p2 = ($signed(zext_ln178_1_fu_523_p1) + $signed(12'd2556));

assign add_ln179_7_fu_556_p2 = (add_ln179_6_fu_550_p2 + p_shl50_cast_fu_519_p1);

assign add_ln179_fu_471_p2 = (select_ln173_1_fu_457_p3 + zext_ln178_2_fu_468_p1);

assign add_ln181_1_fu_634_p2 = (zext_ln181_fu_630_p1 + p_shl46_cast_fu_606_p1);

assign add_ln181_2_fu_692_p2 = ($signed(Weights_load_reg_901) + $signed(s_2_fu_661_p4));

assign add_ln181_3_fu_624_p2 = (zext_ln173_fu_617_p1 + zext_ln173_1_fu_621_p1);

assign add_ln181_fu_674_p2 = ($signed(sext_ln181_fu_670_p1) + $signed(conv_i_i13_i93_i382_fu_658_p1));

assign and_ln171_1_fu_262_p2 = (xor_ln171_fu_250_p2 & icmp_ln176_fu_256_p2);

assign and_ln171_fu_346_p2 = (xor_ln171_reg_797 & icmp_ln178_fu_323_p2);

assign and_ln173_fu_351_p2 = (or_ln173_1_fu_341_p2 & and_ln171_fu_346_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arrayidx45_sum_cast_fu_594_p1 = arrayidx45_sum_fu_588_p2;

assign arrayidx45_sum_fu_588_p2 = ($signed(zext_ln171_fu_585_p1) + $signed(13'd5116));

assign conv_i_i13_i93_i382_fu_658_p1 = Weights_load_reg_901;

assign empty_158_fu_393_p1 = select_ln176_fu_381_p3[3:0];

assign empty_fu_464_p1 = select_ln171_1_fu_444_p3[4:0];

assign grp_fu_711_p0 = grp_fu_711_p00;

assign grp_fu_711_p00 = select_ln176_fu_381_p3;

assign grp_fu_711_p1 = 10'd44;

assign grp_fu_711_p2 = grp_fu_711_p20;

assign grp_fu_711_p20 = add_ln179_fu_471_p2;

assign grp_fu_720_p2 = {{select_ln173_2_fu_643_p3}, {8'd0}};

assign icmp_ln171_fu_232_p2 = ((indvar_flatten182_fu_128 == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln173_fu_244_p2 = ((indvar_flatten158_fu_120 == 13'd3200) ? 1'b1 : 1'b0);

assign icmp_ln176_1_fu_409_p2 = ((select_ln176_fu_381_p3 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_256_p2 = ((indvar_flatten143_fu_112 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln178_1_fu_403_p2 = ((add_ln178_fu_397_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_323_p2 = ((j_fu_104 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln173_1_fu_341_p2 = (xor_ln173_fu_336_p2 | icmp_ln173_reg_789);

assign or_ln173_fu_268_p2 = (icmp_ln173_fu_244_p2 | and_ln171_1_fu_262_p2);

assign or_ln174_1_fu_368_p2 = (or_ln174_fu_363_p2 | icmp_ln173_reg_789);

assign or_ln174_fu_363_p2 = (and_ln173_fu_351_p2 | and_ln171_1_reg_807);

assign p_shl17_fu_502_p3 = {{empty_reg_858}, {4'd0}};

assign p_shl18_fu_599_p3 = {{empty_reg_858_pp0_iter6_reg}, {5'd0}};

assign p_shl19_fu_610_p3 = {{empty_reg_858_pp0_iter6_reg}, {3'd0}};

assign p_shl20_fu_512_p3 = {{empty_158_reg_835_pp0_iter4_reg}, {2'd0}};

assign p_shl46_cast_fu_606_p1 = p_shl18_fu_599_p3;

assign p_shl48_cast_fu_498_p1 = p_shl_fu_491_p3;

assign p_shl50_cast_fu_519_p1 = p_shl20_fu_512_p3;

assign p_shl_fu_491_p3 = {{empty_reg_858}, {6'd0}};

assign s_2_fu_661_p1 = grp_fu_720_p3;

assign s_2_fu_661_p4 = {{s_2_fu_661_p1[23:8]}};

assign select_ln171_1_fu_444_p3 = ((icmp_ln173_reg_789_pp0_iter3_reg[0:0] == 1'b1) ? add_ln171_1_fu_438_p2 : n_fu_124);

assign select_ln171_fu_431_p3 = ((icmp_ln173_reg_789_pp0_iter3_reg[0:0] == 1'b1) ? 6'd0 : y_fu_116);

assign select_ln173_1_fu_457_p3 = ((and_ln171_1_reg_807_pp0_iter3_reg[0:0] == 1'b1) ? add_ln173_fu_451_p2 : select_ln171_fu_431_p3);

assign select_ln173_2_fu_643_p3 = ((or_ln173_reg_813_pp0_iter7_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_s_load);

assign select_ln173_3_fu_294_p3 = ((icmp_ln173_fu_244_p2[0:0] == 1'b1) ? 13'd1 : add_ln173_1_fu_288_p2);

assign select_ln173_fu_329_p3 = ((or_ln173_reg_813[0:0] == 1'b1) ? 5'd0 : k_fu_108);

assign select_ln174_fu_373_p3 = ((or_ln174_1_fu_368_p2[0:0] == 1'b1) ? 3'd0 : j_fu_104);

assign select_ln176_1_fu_280_p3 = ((or_ln173_fu_268_p2[0:0] == 1'b1) ? 8'd1 : add_ln176_1_fu_274_p2);

assign select_ln176_fu_381_p3 = ((and_ln173_fu_351_p2[0:0] == 1'b1) ? add_ln176_fu_357_p2 : select_ln173_fu_329_p3);

assign sext_ln181_fu_670_p1 = s_2_fu_661_p4;

assign tmp_fu_680_p3 = add_ln181_fu_674_p2[32'd16];

assign xor_ln171_fu_250_p2 = (icmp_ln173_fu_244_p2 ^ 1'd1);

assign xor_ln173_fu_336_p2 = (icmp_ln176_reg_802 ^ 1'd1);

assign zext_ln171_fu_585_p1 = select_ln171_1_reg_848_pp0_iter6_reg;

assign zext_ln173_1_fu_621_p1 = select_ln173_1_reg_853_pp0_iter6_reg;

assign zext_ln173_fu_617_p1 = p_shl19_fu_610_p3;

assign zext_ln176_fu_509_p1 = select_ln176_reg_825_pp0_iter4_reg;

assign zext_ln178_1_fu_523_p1 = select_ln174_reg_819_pp0_iter4_reg;

assign zext_ln178_2_fu_468_p1 = select_ln174_reg_819_pp0_iter3_reg;

assign zext_ln179_1_fu_526_p1 = grp_fu_711_p3;

assign zext_ln179_2_fu_536_p1 = add_ln179_2_fu_530_p2;

assign zext_ln179_3_fu_546_p1 = add_ln179_5_fu_540_p2;

assign zext_ln179_4_fu_562_p1 = add_ln179_7_fu_556_p2;

assign zext_ln179_5_fu_572_p1 = add_ln179_3_fu_566_p2;

assign zext_ln181_1_fu_688_p1 = add_ln181_1_reg_896_pp0_iter8_reg;

assign zext_ln181_fu_630_p1 = add_ln181_3_fu_624_p2;

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_171_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6
