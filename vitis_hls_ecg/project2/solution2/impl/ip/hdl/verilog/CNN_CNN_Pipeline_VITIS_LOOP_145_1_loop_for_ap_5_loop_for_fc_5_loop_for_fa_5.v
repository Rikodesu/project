// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_145_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        Weights_address1,
        Weights_ce1,
        Weights_q1,
        OutPadConv5_address0,
        OutPadConv5_ce0,
        OutPadConv5_q0,
        OutConv5_address0,
        OutConv5_ce0,
        OutConv5_we0,
        OutConv5_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [15:0] Weights_q0;
output  [13:0] Weights_address1;
output   Weights_ce1;
input  [15:0] Weights_q1;
output  [10:0] OutPadConv5_address0;
output   OutPadConv5_ce0;
input  [15:0] OutPadConv5_q0;
output  [10:0] OutConv5_address0;
output   OutConv5_ce0;
output   OutConv5_we0;
output  [15:0] OutConv5_d0;

reg ap_idle;
reg Weights_ce0;
reg Weights_ce1;
reg OutPadConv5_ce0;
reg OutConv5_ce0;
reg OutConv5_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln145_fu_230_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln147_fu_242_p2;
reg   [0:0] icmp_ln147_reg_753;
reg   [0:0] icmp_ln147_reg_753_pp0_iter2_reg;
reg   [0:0] icmp_ln147_reg_753_pp0_iter3_reg;
wire   [0:0] xor_ln145_fu_248_p2;
reg   [0:0] xor_ln145_reg_761;
wire   [0:0] icmp_ln150_fu_254_p2;
reg   [0:0] icmp_ln150_reg_766;
wire   [0:0] and_ln145_1_fu_260_p2;
reg   [0:0] and_ln145_1_reg_771;
reg   [0:0] and_ln145_1_reg_771_pp0_iter2_reg;
reg   [0:0] and_ln145_1_reg_771_pp0_iter3_reg;
wire   [0:0] or_ln147_fu_266_p2;
reg   [0:0] or_ln147_reg_777;
reg   [0:0] or_ln147_reg_777_pp0_iter2_reg;
reg   [0:0] or_ln147_reg_777_pp0_iter3_reg;
reg   [0:0] or_ln147_reg_777_pp0_iter4_reg;
reg   [0:0] or_ln147_reg_777_pp0_iter5_reg;
reg   [0:0] or_ln147_reg_777_pp0_iter6_reg;
reg   [0:0] or_ln147_reg_777_pp0_iter7_reg;
wire   [2:0] select_ln148_fu_371_p3;
reg   [2:0] select_ln148_reg_783;
reg   [2:0] select_ln148_reg_783_pp0_iter3_reg;
wire   [10:0] zext_ln150_fu_387_p1;
reg   [10:0] zext_ln150_reg_789;
reg   [10:0] zext_ln150_reg_789_pp0_iter3_reg;
wire   [3:0] empty_161_fu_391_p1;
reg   [3:0] empty_161_reg_795;
reg   [3:0] empty_161_reg_795_pp0_iter3_reg;
wire   [0:0] icmp_ln152_1_fu_401_p2;
reg   [0:0] icmp_ln152_1_reg_800;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter3_reg;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter4_reg;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter5_reg;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter6_reg;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter7_reg;
reg   [0:0] icmp_ln152_1_reg_800_pp0_iter8_reg;
wire   [0:0] icmp_ln150_1_fu_407_p2;
reg   [0:0] icmp_ln150_1_reg_804;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter3_reg;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter4_reg;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter5_reg;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter6_reg;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter7_reg;
reg   [0:0] icmp_ln150_1_reg_804_pp0_iter8_reg;
wire   [4:0] select_ln145_1_fu_442_p3;
reg   [4:0] select_ln145_1_reg_808;
reg   [4:0] select_ln145_1_reg_808_pp0_iter5_reg;
reg   [4:0] select_ln145_1_reg_808_pp0_iter6_reg;
wire   [11:0] add_ln153_3_fu_552_p2;
reg   [11:0] add_ln153_3_reg_818;
wire   [10:0] add_ln155_1_fu_558_p2;
reg   [10:0] add_ln155_1_reg_823;
reg   [10:0] add_ln155_1_reg_823_pp0_iter5_reg;
reg   [10:0] add_ln155_1_reg_823_pp0_iter6_reg;
reg   [10:0] add_ln155_1_reg_823_pp0_iter7_reg;
reg   [10:0] add_ln155_1_reg_823_pp0_iter8_reg;
reg  signed [15:0] Weights_load_reg_853;
wire   [63:0] zext_ln153_4_fu_578_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln153_1_fu_574_p1;
wire   [63:0] arrayidx37_sum_cast_fu_599_p1;
wire   [63:0] zext_ln155_fu_652_p1;
reg   [15:0] s_fu_98;
wire  signed [15:0] s_3_fu_625_p4;
reg   [15:0] ap_sig_allocacmp_s_load;
wire    ap_loop_init;
reg   [2:0] j_fu_102;
wire   [2:0] add_ln152_fu_395_p2;
reg   [4:0] k_fu_106;
wire   [4:0] select_ln150_fu_379_p3;
reg   [7:0] indvar_flatten83_fu_110;
wire   [7:0] select_ln150_1_fu_278_p3;
reg   [6:0] y_fu_114;
wire   [6:0] select_ln147_1_fu_455_p3;
reg   [13:0] indvar_flatten98_fu_118;
wire   [13:0] select_ln147_3_fu_292_p3;
reg   [4:0] n_fu_122;
reg   [16:0] indvar_flatten122_fu_126;
wire   [16:0] add_ln145_fu_236_p2;
wire   [7:0] add_ln150_1_fu_272_p2;
wire   [13:0] add_ln147_1_fu_286_p2;
wire   [0:0] xor_ln147_fu_334_p2;
wire   [0:0] icmp_ln152_fu_321_p2;
wire   [0:0] and_ln145_fu_344_p2;
wire   [0:0] or_ln147_1_fu_339_p2;
wire   [4:0] select_ln147_fu_327_p3;
wire   [0:0] and_ln147_fu_349_p2;
wire   [0:0] or_ln148_fu_361_p2;
wire   [0:0] or_ln148_1_fu_366_p2;
wire   [4:0] add_ln150_fu_355_p2;
wire   [4:0] add_ln145_1_fu_436_p2;
wire   [6:0] select_ln145_fu_429_p3;
wire   [6:0] add_ln147_fu_449_p2;
wire   [3:0] empty_fu_462_p1;
wire   [9:0] p_shl_fu_466_p3;
wire   [7:0] p_shl21_fu_478_p3;
wire   [10:0] p_shl37_cast_fu_474_p1;
wire   [10:0] p_shl38_cast_fu_486_p1;
wire   [5:0] p_shl22_fu_500_p3;
wire   [6:0] zext_ln152_1_fu_514_p1;
wire   [6:0] add_ln153_fu_517_p2;
wire   [10:0] empty_160_fu_490_p2;
wire   [10:0] add_ln153_2_fu_527_p2;
wire   [10:0] zext_ln152_fu_511_p1;
wire   [10:0] add_ln153_5_fu_536_p2;
wire   [10:0] p_shl39_cast_fu_507_p1;
wire   [10:0] add_ln153_6_fu_542_p2;
wire   [11:0] zext_ln153_3_fu_548_p1;
wire   [11:0] zext_ln153_2_fu_532_p1;
wire   [10:0] zext_ln147_fu_496_p1;
wire   [10:0] grp_fu_675_p3;
wire   [11:0] zext_ln145_fu_590_p1;
wire   [11:0] arrayidx37_sum_fu_593_p2;
wire   [15:0] select_ln147_2_fu_607_p3;
wire  signed [23:0] s_3_fu_625_p1;
wire   [23:0] grp_fu_684_p3;
wire  signed [16:0] sext_ln155_fu_634_p1;
wire  signed [16:0] conv_i_i13_i93_i298_fu_622_p1;
wire   [16:0] add_ln155_fu_638_p2;
wire   [0:0] tmp_fu_644_p3;
wire   [15:0] add_ln155_2_fu_656_p2;
wire   [4:0] grp_fu_675_p0;
wire   [6:0] grp_fu_675_p1;
wire   [6:0] grp_fu_675_p2;
wire   [23:0] grp_fu_684_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] grp_fu_675_p00;
wire   [10:0] grp_fu_675_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 s_fu_98 = 16'd0;
#0 j_fu_102 = 3'd0;
#0 k_fu_106 = 5'd0;
#0 indvar_flatten83_fu_110 = 8'd0;
#0 y_fu_114 = 7'd0;
#0 indvar_flatten98_fu_118 = 14'd0;
#0 n_fu_122 = 5'd0;
#0 indvar_flatten122_fu_126 = 17'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_5ns_7ns_7ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mac_muladd_5ns_7ns_7ns_11_4_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_675_p0),
    .din1(grp_fu_675_p1),
    .din2(grp_fu_675_p2),
    .ce(1'b1),
    .dout(grp_fu_675_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv5_q0),
    .din1(Weights_q1),
    .din2(grp_fu_684_p2),
    .ce(1'b1),
    .dout(grp_fu_684_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten122_fu_126 <= 17'd0;
        end else if (((icmp_ln145_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten122_fu_126 <= add_ln145_fu_236_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten83_fu_110 <= 8'd0;
        end else if (((icmp_ln145_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten83_fu_110 <= select_ln150_1_fu_278_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten98_fu_118 <= 14'd0;
        end else if (((icmp_ln145_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten98_fu_118 <= select_ln147_3_fu_292_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_102 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_102 <= add_ln152_fu_395_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            k_fu_106 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_106 <= select_ln150_fu_379_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            n_fu_122 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            n_fu_122 <= select_ln145_1_fu_442_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_fu_98 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
            s_fu_98 <= {{s_3_fu_625_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_114 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            y_fu_114 <= select_ln147_1_fu_455_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Weights_load_reg_853 <= Weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln153_3_reg_818 <= add_ln153_3_fu_552_p2;
        add_ln155_1_reg_823 <= add_ln155_1_fu_558_p2;
        add_ln155_1_reg_823_pp0_iter5_reg <= add_ln155_1_reg_823;
        add_ln155_1_reg_823_pp0_iter6_reg <= add_ln155_1_reg_823_pp0_iter5_reg;
        add_ln155_1_reg_823_pp0_iter7_reg <= add_ln155_1_reg_823_pp0_iter6_reg;
        add_ln155_1_reg_823_pp0_iter8_reg <= add_ln155_1_reg_823_pp0_iter7_reg;
        and_ln145_1_reg_771_pp0_iter2_reg <= and_ln145_1_reg_771;
        and_ln145_1_reg_771_pp0_iter3_reg <= and_ln145_1_reg_771_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        empty_161_reg_795 <= empty_161_fu_391_p1;
        empty_161_reg_795_pp0_iter3_reg <= empty_161_reg_795;
        icmp_ln147_reg_753_pp0_iter2_reg <= icmp_ln147_reg_753;
        icmp_ln147_reg_753_pp0_iter3_reg <= icmp_ln147_reg_753_pp0_iter2_reg;
        icmp_ln150_1_reg_804 <= icmp_ln150_1_fu_407_p2;
        icmp_ln150_1_reg_804_pp0_iter3_reg <= icmp_ln150_1_reg_804;
        icmp_ln150_1_reg_804_pp0_iter4_reg <= icmp_ln150_1_reg_804_pp0_iter3_reg;
        icmp_ln150_1_reg_804_pp0_iter5_reg <= icmp_ln150_1_reg_804_pp0_iter4_reg;
        icmp_ln150_1_reg_804_pp0_iter6_reg <= icmp_ln150_1_reg_804_pp0_iter5_reg;
        icmp_ln150_1_reg_804_pp0_iter7_reg <= icmp_ln150_1_reg_804_pp0_iter6_reg;
        icmp_ln150_1_reg_804_pp0_iter8_reg <= icmp_ln150_1_reg_804_pp0_iter7_reg;
        icmp_ln152_1_reg_800 <= icmp_ln152_1_fu_401_p2;
        icmp_ln152_1_reg_800_pp0_iter3_reg <= icmp_ln152_1_reg_800;
        icmp_ln152_1_reg_800_pp0_iter4_reg <= icmp_ln152_1_reg_800_pp0_iter3_reg;
        icmp_ln152_1_reg_800_pp0_iter5_reg <= icmp_ln152_1_reg_800_pp0_iter4_reg;
        icmp_ln152_1_reg_800_pp0_iter6_reg <= icmp_ln152_1_reg_800_pp0_iter5_reg;
        icmp_ln152_1_reg_800_pp0_iter7_reg <= icmp_ln152_1_reg_800_pp0_iter6_reg;
        icmp_ln152_1_reg_800_pp0_iter8_reg <= icmp_ln152_1_reg_800_pp0_iter7_reg;
        or_ln147_reg_777_pp0_iter2_reg <= or_ln147_reg_777;
        or_ln147_reg_777_pp0_iter3_reg <= or_ln147_reg_777_pp0_iter2_reg;
        or_ln147_reg_777_pp0_iter4_reg <= or_ln147_reg_777_pp0_iter3_reg;
        or_ln147_reg_777_pp0_iter5_reg <= or_ln147_reg_777_pp0_iter4_reg;
        or_ln147_reg_777_pp0_iter6_reg <= or_ln147_reg_777_pp0_iter5_reg;
        or_ln147_reg_777_pp0_iter7_reg <= or_ln147_reg_777_pp0_iter6_reg;
        select_ln145_1_reg_808 <= select_ln145_1_fu_442_p3;
        select_ln145_1_reg_808_pp0_iter5_reg <= select_ln145_1_reg_808;
        select_ln145_1_reg_808_pp0_iter6_reg <= select_ln145_1_reg_808_pp0_iter5_reg;
        select_ln148_reg_783 <= select_ln148_fu_371_p3;
        select_ln148_reg_783_pp0_iter3_reg <= select_ln148_reg_783;
        zext_ln150_reg_789[4 : 0] <= zext_ln150_fu_387_p1[4 : 0];
        zext_ln150_reg_789_pp0_iter3_reg[4 : 0] <= zext_ln150_reg_789[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln145_1_reg_771 <= and_ln145_1_fu_260_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln147_reg_753 <= icmp_ln147_fu_242_p2;
        icmp_ln150_reg_766 <= icmp_ln150_fu_254_p2;
        or_ln147_reg_777 <= or_ln147_fu_266_p2;
        xor_ln145_reg_761 <= xor_ln145_fu_248_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        OutConv5_ce0 = 1'b1;
    end else begin
        OutConv5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln150_1_reg_804_pp0_iter8_reg == 1'd1) & (icmp_ln152_1_reg_800_pp0_iter8_reg == 1'd1))) begin
        OutConv5_we0 = 1'b1;
    end else begin
        OutConv5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        OutPadConv5_ce0 = 1'b1;
    end else begin
        OutPadConv5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        Weights_ce0 = 1'b1;
    end else begin
        Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Weights_ce1 = 1'b1;
    end else begin
        Weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln145_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_sig_allocacmp_s_load = {{s_3_fu_625_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_s_load = s_fu_98;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv5_address0 = zext_ln155_fu_652_p1;

assign OutConv5_d0 = ((tmp_fu_644_p3[0:0] == 1'b1) ? 16'd0 : add_ln155_2_fu_656_p2);

assign OutPadConv5_address0 = zext_ln153_1_fu_574_p1;

assign Weights_address0 = arrayidx37_sum_cast_fu_599_p1;

assign Weights_address1 = zext_ln153_4_fu_578_p1;

assign add_ln145_1_fu_436_p2 = (n_fu_122 + 5'd1);

assign add_ln145_fu_236_p2 = (indvar_flatten122_fu_126 + 17'd1);

assign add_ln147_1_fu_286_p2 = (indvar_flatten98_fu_118 + 14'd1);

assign add_ln147_fu_449_p2 = (select_ln145_fu_429_p3 + 7'd1);

assign add_ln150_1_fu_272_p2 = (indvar_flatten83_fu_110 + 8'd1);

assign add_ln150_fu_355_p2 = (select_ln147_fu_327_p3 + 5'd1);

assign add_ln152_fu_395_p2 = (select_ln148_fu_371_p3 + 3'd1);

assign add_ln153_2_fu_527_p2 = (empty_160_fu_490_p2 + zext_ln150_reg_789_pp0_iter3_reg);

assign add_ln153_3_fu_552_p2 = (zext_ln153_3_fu_548_p1 + zext_ln153_2_fu_532_p1);

assign add_ln153_5_fu_536_p2 = ($signed(zext_ln152_fu_511_p1) + $signed(11'd1260));

assign add_ln153_6_fu_542_p2 = (add_ln153_5_fu_536_p2 + p_shl39_cast_fu_507_p1);

assign add_ln153_fu_517_p2 = (select_ln147_1_fu_455_p3 + zext_ln152_1_fu_514_p1);

assign add_ln155_1_fu_558_p2 = (zext_ln147_fu_496_p1 + empty_160_fu_490_p2);

assign add_ln155_2_fu_656_p2 = ($signed(Weights_load_reg_853) + $signed(s_3_fu_625_p4));

assign add_ln155_fu_638_p2 = ($signed(sext_ln155_fu_634_p1) + $signed(conv_i_i13_i93_i298_fu_622_p1));

assign and_ln145_1_fu_260_p2 = (xor_ln145_fu_248_p2 & icmp_ln150_fu_254_p2);

assign and_ln145_fu_344_p2 = (xor_ln145_reg_761 & icmp_ln152_fu_321_p2);

assign and_ln147_fu_349_p2 = (or_ln147_1_fu_339_p2 & and_ln145_fu_344_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arrayidx37_sum_cast_fu_599_p1 = arrayidx37_sum_fu_593_p2;

assign arrayidx37_sum_fu_593_p2 = ($signed(zext_ln145_fu_590_p1) + $signed(12'd2540));

assign conv_i_i13_i93_i298_fu_622_p1 = Weights_load_reg_853;

assign empty_160_fu_490_p2 = (p_shl37_cast_fu_474_p1 + p_shl38_cast_fu_486_p1);

assign empty_161_fu_391_p1 = select_ln150_fu_379_p3[3:0];

assign empty_fu_462_p1 = select_ln145_1_fu_442_p3[3:0];

assign grp_fu_675_p0 = grp_fu_675_p00;

assign grp_fu_675_p00 = select_ln150_fu_379_p3;

assign grp_fu_675_p1 = 11'd84;

assign grp_fu_675_p2 = grp_fu_675_p20;

assign grp_fu_675_p20 = add_ln153_fu_517_p2;

assign grp_fu_684_p2 = {{select_ln147_2_fu_607_p3}, {8'd0}};

assign icmp_ln145_fu_230_p2 = ((indvar_flatten122_fu_126 == 17'd102400) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_242_p2 = ((indvar_flatten98_fu_118 == 14'd6400) ? 1'b1 : 1'b0);

assign icmp_ln150_1_fu_407_p2 = ((select_ln150_fu_379_p3 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_254_p2 = ((indvar_flatten83_fu_110 == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln152_1_fu_401_p2 = ((add_ln152_fu_395_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_321_p2 = ((j_fu_102 == 3'd5) ? 1'b1 : 1'b0);

assign or_ln147_1_fu_339_p2 = (xor_ln147_fu_334_p2 | icmp_ln147_reg_753);

assign or_ln147_fu_266_p2 = (icmp_ln147_fu_242_p2 | and_ln145_1_fu_260_p2);

assign or_ln148_1_fu_366_p2 = (or_ln148_fu_361_p2 | icmp_ln147_reg_753);

assign or_ln148_fu_361_p2 = (and_ln147_fu_349_p2 | and_ln145_1_reg_771);

assign p_shl21_fu_478_p3 = {{empty_fu_462_p1}, {4'd0}};

assign p_shl22_fu_500_p3 = {{empty_161_reg_795_pp0_iter3_reg}, {2'd0}};

assign p_shl37_cast_fu_474_p1 = p_shl_fu_466_p3;

assign p_shl38_cast_fu_486_p1 = p_shl21_fu_478_p3;

assign p_shl39_cast_fu_507_p1 = p_shl22_fu_500_p3;

assign p_shl_fu_466_p3 = {{empty_fu_462_p1}, {6'd0}};

assign s_3_fu_625_p1 = grp_fu_684_p3;

assign s_3_fu_625_p4 = {{s_3_fu_625_p1[23:8]}};

assign select_ln145_1_fu_442_p3 = ((icmp_ln147_reg_753_pp0_iter3_reg[0:0] == 1'b1) ? add_ln145_1_fu_436_p2 : n_fu_122);

assign select_ln145_fu_429_p3 = ((icmp_ln147_reg_753_pp0_iter3_reg[0:0] == 1'b1) ? 7'd0 : y_fu_114);

assign select_ln147_1_fu_455_p3 = ((and_ln145_1_reg_771_pp0_iter3_reg[0:0] == 1'b1) ? add_ln147_fu_449_p2 : select_ln145_fu_429_p3);

assign select_ln147_2_fu_607_p3 = ((or_ln147_reg_777_pp0_iter7_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_s_load);

assign select_ln147_3_fu_292_p3 = ((icmp_ln147_fu_242_p2[0:0] == 1'b1) ? 14'd1 : add_ln147_1_fu_286_p2);

assign select_ln147_fu_327_p3 = ((or_ln147_reg_777[0:0] == 1'b1) ? 5'd0 : k_fu_106);

assign select_ln148_fu_371_p3 = ((or_ln148_1_fu_366_p2[0:0] == 1'b1) ? 3'd0 : j_fu_102);

assign select_ln150_1_fu_278_p3 = ((or_ln147_fu_266_p2[0:0] == 1'b1) ? 8'd1 : add_ln150_1_fu_272_p2);

assign select_ln150_fu_379_p3 = ((and_ln147_fu_349_p2[0:0] == 1'b1) ? add_ln150_fu_355_p2 : select_ln147_fu_327_p3);

assign sext_ln155_fu_634_p1 = s_3_fu_625_p4;

assign tmp_fu_644_p3 = add_ln155_fu_638_p2[32'd16];

assign xor_ln145_fu_248_p2 = (icmp_ln147_fu_242_p2 ^ 1'd1);

assign xor_ln147_fu_334_p2 = (icmp_ln150_reg_766 ^ 1'd1);

assign zext_ln145_fu_590_p1 = select_ln145_1_reg_808_pp0_iter6_reg;

assign zext_ln147_fu_496_p1 = select_ln147_1_fu_455_p3;

assign zext_ln150_fu_387_p1 = select_ln150_fu_379_p3;

assign zext_ln152_1_fu_514_p1 = select_ln148_reg_783_pp0_iter3_reg;

assign zext_ln152_fu_511_p1 = select_ln148_reg_783_pp0_iter3_reg;

assign zext_ln153_1_fu_574_p1 = grp_fu_675_p3;

assign zext_ln153_2_fu_532_p1 = add_ln153_2_fu_527_p2;

assign zext_ln153_3_fu_548_p1 = add_ln153_6_fu_542_p2;

assign zext_ln153_4_fu_578_p1 = add_ln153_3_reg_818;

assign zext_ln155_fu_652_p1 = add_ln155_1_reg_823_pp0_iter8_reg;

always @ (posedge ap_clk) begin
    zext_ln150_reg_789[10:5] <= 6'b000000;
    zext_ln150_reg_789_pp0_iter3_reg[10:5] <= 6'b000000;
end

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_145_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5
