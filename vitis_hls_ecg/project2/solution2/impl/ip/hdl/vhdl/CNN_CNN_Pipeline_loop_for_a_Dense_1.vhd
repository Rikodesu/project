-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_a_Dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_Dense_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_Dense_ce0 : OUT STD_LOGIC;
    out_Dense_we0 : OUT STD_LOGIC;
    out_Dense_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_a_Dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_55A : STD_LOGIC_VECTOR (10 downto 0) := "10101011010";
    constant ap_const_lv14_2AD5 : STD_LOGIC_VECTOR (13 downto 0) := "10101011010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv14_2ADA : STD_LOGIC_VECTOR (13 downto 0) := "10101011011010";
    constant ap_const_lv14_2ADF : STD_LOGIC_VECTOR (13 downto 0) := "10101011011111";
    constant ap_const_lv14_2AE4 : STD_LOGIC_VECTOR (13 downto 0) := "10101011100100";
    constant ap_const_lv14_2AE9 : STD_LOGIC_VECTOR (13 downto 0) := "10101011101001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_2AEE : STD_LOGIC_VECTOR (13 downto 0) := "10101011101110";
    constant ap_const_lv14_2AF3 : STD_LOGIC_VECTOR (13 downto 0) := "10101011110011";
    constant ap_const_lv11_55F : STD_LOGIC_VECTOR (10 downto 0) := "10101011111";
    constant ap_const_lv14_2AFD : STD_LOGIC_VECTOR (13 downto 0) := "10101011111101";
    constant ap_const_lv14_2B02 : STD_LOGIC_VECTOR (13 downto 0) := "10101100000010";
    constant ap_const_lv14_2B07 : STD_LOGIC_VECTOR (13 downto 0) := "10101100000111";
    constant ap_const_lv14_2B0C : STD_LOGIC_VECTOR (13 downto 0) := "10101100001100";
    constant ap_const_lv14_2B11 : STD_LOGIC_VECTOR (13 downto 0) := "10101100010001";
    constant ap_const_lv14_2B16 : STD_LOGIC_VECTOR (13 downto 0) := "10101100010110";
    constant ap_const_lv14_2B1B : STD_LOGIC_VECTOR (13 downto 0) := "10101100011011";
    constant ap_const_lv11_564 : STD_LOGIC_VECTOR (10 downto 0) := "10101100100";
    constant ap_const_lv14_2B25 : STD_LOGIC_VECTOR (13 downto 0) := "10101100100101";
    constant ap_const_lv14_2B2A : STD_LOGIC_VECTOR (13 downto 0) := "10101100101010";
    constant ap_const_lv14_2B2F : STD_LOGIC_VECTOR (13 downto 0) := "10101100101111";
    constant ap_const_lv14_2B34 : STD_LOGIC_VECTOR (13 downto 0) := "10101100110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal icmp_ln17_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_444 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_449 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_459 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal sext_ln21_19_cast_fu_464_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_19_cast_reg_1372 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln21_18_cast_fu_468_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_18_cast_reg_1377 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_17_cast_fu_472_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_17_cast_reg_1382 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_16_cast_fu_476_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_16_cast_reg_1387 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_15_cast_fu_480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_15_cast_reg_1392 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_14_cast_fu_484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_14_cast_reg_1397 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_13_cast_fu_488_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_13_cast_reg_1402 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_12_cast_fu_492_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_12_cast_reg_1407 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_11_cast_fu_496_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_11_cast_reg_1412 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_10_cast_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_10_cast_reg_1417 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_9_cast_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_9_cast_reg_1422 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_8_cast_fu_508_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_8_cast_reg_1427 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_7_cast_fu_512_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_7_cast_reg_1432 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_6_cast_fu_516_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_6_cast_reg_1437 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_5_cast_fu_520_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_5_cast_reg_1442 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_4_cast_fu_524_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_4_cast_reg_1447 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_3_cast_fu_528_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_3_cast_reg_1452 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_2_cast_fu_532_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_2_cast_reg_1457 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_1_cast_fu_536_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_1_cast_reg_1462 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_cast_fu_540_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_cast_reg_1467 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_1472 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1472_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln17_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_1_fu_564_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_1_reg_1483 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_1_reg_1483_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_11_reg_1619 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_13_reg_1644 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_15_reg_1669 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_17_reg_1694 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal Weights_load_18_reg_1719 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_19_reg_1724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln21_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln21_3_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln21_5_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln21_7_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_8_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln21_9_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_10_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln21_11_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_12_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln21_13_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_14_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln21_15_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_16_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln21_17_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_18_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln21_19_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln17_fu_1193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_130 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln17_fu_558_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln21_cast_fu_568_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_fu_581_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln21_fu_601_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln21_fu_601_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln21_2_fu_620_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_4_fu_630_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_6_fu_644_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_8_fu_654_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_10_fu_675_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_12_fu_685_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_695_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1213_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_695_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_8_cast_fu_716_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_15_fu_728_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_738_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_738_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_17_fu_759_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_19_fu_769_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_779_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1229_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_779_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_21_fu_800_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_23_fu_810_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_820_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1237_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_820_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_25_fu_841_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_27_fu_851_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_861_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1245_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_861_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_16_cast_fu_882_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_30_fu_894_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_904_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1253_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_904_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_32_fu_925_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_34_fu_935_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_945_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1261_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_945_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_966_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1269_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_966_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_986_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1277_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_986_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_1007_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1285_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_1007_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1027_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1293_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_1027_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1048_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1301_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_1048_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_1068_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1309_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_1068_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_1089_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1317_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_1089_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1109_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1325_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_1109_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1129_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1333_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_1129_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1149_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1341_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_1149_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1166_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1349_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1166_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_fu_1183_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal s_fu_1197_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1357_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal s_fu_1197_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1221_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1245_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1253_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1261_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1261_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1269_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1269_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1277_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1277_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1285_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1285_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1293_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1301_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1301_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1309_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1309_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1317_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1325_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1325_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1333_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1333_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1341_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1341_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1349_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1357_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U290 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => Weights_q1,
        din1 => mul_ln21_fu_601_p1,
        dout => mul_ln21_fu_601_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U291 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_q0,
        din1 => grp_fu_1213_p1,
        din2 => grp_fu_1213_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U292 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_q1,
        din1 => grp_fu_1221_p1,
        din2 => grp_fu_1221_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1221_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U293 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_444,
        din1 => grp_fu_1229_p1,
        din2 => grp_fu_1229_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1229_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U294 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_444,
        din1 => grp_fu_1237_p1,
        din2 => grp_fu_1237_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U295 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_449,
        din1 => grp_fu_1245_p1,
        din2 => grp_fu_1245_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1245_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U296 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_444,
        din1 => grp_fu_1253_p1,
        din2 => grp_fu_1253_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1253_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U297 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_454,
        din1 => grp_fu_1261_p1,
        din2 => grp_fu_1261_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1261_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U298 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_449,
        din1 => grp_fu_1269_p1,
        din2 => grp_fu_1269_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1269_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U299 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_459,
        din1 => grp_fu_1277_p1,
        din2 => grp_fu_1277_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1277_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U300 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_444,
        din1 => grp_fu_1285_p1,
        din2 => grp_fu_1285_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1285_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U301 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_11_reg_1619,
        din1 => grp_fu_1293_p1,
        din2 => grp_fu_1293_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1293_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U302 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_454,
        din1 => grp_fu_1301_p1,
        din2 => grp_fu_1301_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1301_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U303 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_13_reg_1644,
        din1 => grp_fu_1309_p1,
        din2 => grp_fu_1309_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1309_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U304 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_449,
        din1 => grp_fu_1317_p1,
        din2 => grp_fu_1317_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1317_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U305 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_15_reg_1669,
        din1 => grp_fu_1325_p1,
        din2 => grp_fu_1325_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1325_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U306 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_459,
        din1 => grp_fu_1333_p1,
        din2 => grp_fu_1333_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1333_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U307 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_17_reg_1694,
        din1 => grp_fu_1341_p1,
        din2 => grp_fu_1341_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1341_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U308 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_18_reg_1719,
        din1 => grp_fu_1349_p1,
        din2 => grp_fu_1349_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1349_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U309 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_19_reg_1724,
        din1 => grp_fu_1357_p1,
        din2 => grp_fu_1357_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1357_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_552_p2 = ap_const_lv1_0))) then 
                    i_fu_130 <= add_ln17_fu_558_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_130 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_444 <= Weights_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_444 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_449 <= Weights_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_449 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_454 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_454 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_459 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_459 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                Weights_load_11_reg_1619 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                Weights_load_13_reg_1644 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                Weights_load_15_reg_1669 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                Weights_load_17_reg_1694 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                Weights_load_18_reg_1719 <= Weights_q1;
                Weights_load_19_reg_1724 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1472 <= ap_sig_allocacmp_i_1;
                i_1_reg_1472_pp0_iter1_reg <= i_1_reg_1472;
                icmp_ln17_reg_1479 <= icmp_ln17_fu_552_p2;
                sext_ln21_10_cast_reg_1417 <= sext_ln21_10_cast_fu_500_p1;
                sext_ln21_11_cast_reg_1412 <= sext_ln21_11_cast_fu_496_p1;
                sext_ln21_12_cast_reg_1407 <= sext_ln21_12_cast_fu_492_p1;
                sext_ln21_13_cast_reg_1402 <= sext_ln21_13_cast_fu_488_p1;
                sext_ln21_14_cast_reg_1397 <= sext_ln21_14_cast_fu_484_p1;
                sext_ln21_15_cast_reg_1392 <= sext_ln21_15_cast_fu_480_p1;
                sext_ln21_16_cast_reg_1387 <= sext_ln21_16_cast_fu_476_p1;
                sext_ln21_17_cast_reg_1382 <= sext_ln21_17_cast_fu_472_p1;
                sext_ln21_18_cast_reg_1377 <= sext_ln21_18_cast_fu_468_p1;
                sext_ln21_19_cast_reg_1372 <= sext_ln21_19_cast_fu_464_p1;
                sext_ln21_1_cast_reg_1462 <= sext_ln21_1_cast_fu_536_p1;
                sext_ln21_2_cast_reg_1457 <= sext_ln21_2_cast_fu_532_p1;
                sext_ln21_3_cast_reg_1452 <= sext_ln21_3_cast_fu_528_p1;
                sext_ln21_4_cast_reg_1447 <= sext_ln21_4_cast_fu_524_p1;
                sext_ln21_5_cast_reg_1442 <= sext_ln21_5_cast_fu_520_p1;
                sext_ln21_6_cast_reg_1437 <= sext_ln21_6_cast_fu_516_p1;
                sext_ln21_7_cast_reg_1432 <= sext_ln21_7_cast_fu_512_p1;
                sext_ln21_8_cast_reg_1427 <= sext_ln21_8_cast_fu_508_p1;
                sext_ln21_9_cast_reg_1422 <= sext_ln21_9_cast_fu_504_p1;
                sext_ln21_cast_reg_1467 <= sext_ln21_cast_fu_540_p1;
                    zext_ln17_1_reg_1483(2 downto 0) <= zext_ln17_1_fu_564_p1(2 downto 0);
                    zext_ln17_1_reg_1483_pp0_iter1_reg(2 downto 0) <= zext_ln17_1_reg_1483(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_s_reg_1519 <= mul_ln21_fu_601_p2(23 downto 8);
            end if;
        end if;
    end process;
    zext_ln17_1_reg_1483(13 downto 3) <= "00000000000";
    zext_ln17_1_reg_1483_pp0_iter1_reg(13 downto 3) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln21_1_fu_587_p1, ap_block_pp0_stage1, zext_ln21_3_fu_635_p1, ap_block_pp0_stage2, zext_ln21_5_fu_659_p1, ap_block_pp0_stage3, zext_ln21_7_fu_690_p1, ap_block_pp0_stage4, zext_ln21_9_fu_733_p1, ap_block_pp0_stage5, zext_ln21_11_fu_774_p1, ap_block_pp0_stage6, zext_ln21_13_fu_815_p1, ap_block_pp0_stage7, zext_ln21_15_fu_856_p1, ap_block_pp0_stage8, zext_ln21_17_fu_899_p1, ap_block_pp0_stage9, zext_ln21_19_fu_940_p1, zext_ln23_fu_1188_p1, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            Weights_address0 <= zext_ln23_fu_1188_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address0 <= zext_ln21_19_fu_940_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address0 <= zext_ln21_17_fu_899_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address0 <= zext_ln21_15_fu_856_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address0 <= zext_ln21_13_fu_815_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address0 <= zext_ln21_11_fu_774_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address0 <= zext_ln21_9_fu_733_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address0 <= zext_ln21_7_fu_690_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0 <= zext_ln21_5_fu_659_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0 <= zext_ln21_3_fu_635_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0 <= zext_ln21_1_fu_587_p1(14 - 1 downto 0);
        else 
            Weights_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, zext_ln21_fu_576_p1, ap_block_pp0_stage0, zext_ln21_2_fu_625_p1, ap_block_pp0_stage1, zext_ln21_4_fu_649_p1, ap_block_pp0_stage2, zext_ln21_6_fu_680_p1, ap_block_pp0_stage3, zext_ln21_8_fu_723_p1, ap_block_pp0_stage4, zext_ln21_10_fu_764_p1, ap_block_pp0_stage5, zext_ln21_12_fu_805_p1, ap_block_pp0_stage6, zext_ln21_14_fu_846_p1, ap_block_pp0_stage7, zext_ln21_16_fu_889_p1, ap_block_pp0_stage8, zext_ln21_18_fu_930_p1, ap_block_pp0_stage9)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Weights_address1 <= zext_ln21_18_fu_930_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Weights_address1 <= zext_ln21_16_fu_889_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Weights_address1 <= zext_ln21_14_fu_846_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Weights_address1 <= zext_ln21_12_fu_805_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Weights_address1 <= zext_ln21_10_fu_764_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Weights_address1 <= zext_ln21_8_fu_723_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Weights_address1 <= zext_ln21_6_fu_680_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address1 <= zext_ln21_4_fu_649_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address1 <= zext_ln21_2_fu_625_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Weights_address1 <= zext_ln21_fu_576_p1(14 - 1 downto 0);
            else 
                Weights_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_558_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    add_ln21_10_fu_675_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2AEE));
    add_ln21_12_fu_685_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2AF3));
    add_ln21_15_fu_728_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2AFD));
    add_ln21_17_fu_759_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B02));
    add_ln21_19_fu_769_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B07));
    add_ln21_21_fu_800_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B0C));
    add_ln21_23_fu_810_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B11));
    add_ln21_25_fu_841_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B16));
    add_ln21_27_fu_851_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B1B));
    add_ln21_2_fu_620_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2ADA));
    add_ln21_30_fu_894_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B25));
    add_ln21_32_fu_925_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B2A));
    add_ln21_34_fu_935_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2B2F));
    add_ln21_4_fu_630_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2ADF));
    add_ln21_6_fu_644_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2AE4));
    add_ln21_8_fu_654_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483) + unsigned(ap_const_lv14_2AE9));
    add_ln21_fu_581_p2 <= std_logic_vector(unsigned(zext_ln17_1_fu_564_p1) + unsigned(ap_const_lv14_2AD5));
    add_ln23_fu_1183_p2 <= std_logic_vector(unsigned(zext_ln17_1_reg_1483_pp0_iter1_reg) + unsigned(ap_const_lv14_2B34));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, icmp_ln17_reg_1479)
    begin
        if (((icmp_ln17_reg_1479 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_1479, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln17_reg_1479 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_130, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_130;
        end if; 
    end process;

    grp_fu_1213_p1 <= sext_ln21_1_cast_reg_1462(16 - 1 downto 0);
    grp_fu_1213_p2 <= (tmp_s_reg_1519 & ap_const_lv8_0);
    grp_fu_1221_p1 <= sext_ln21_2_cast_reg_1457(16 - 1 downto 0);
    grp_fu_1221_p2 <= (tmp_1_fu_695_p4 & ap_const_lv8_0);
    grp_fu_1229_p1 <= sext_ln21_3_cast_reg_1452(16 - 1 downto 0);
    grp_fu_1229_p2 <= (tmp_2_fu_738_p4 & ap_const_lv8_0);
    grp_fu_1237_p1 <= sext_ln21_4_cast_reg_1447(16 - 1 downto 0);
    grp_fu_1237_p2 <= (tmp_3_fu_779_p4 & ap_const_lv8_0);
    grp_fu_1245_p1 <= sext_ln21_5_cast_reg_1442(16 - 1 downto 0);
    grp_fu_1245_p2 <= (tmp_4_fu_820_p4 & ap_const_lv8_0);
    grp_fu_1253_p1 <= sext_ln21_6_cast_reg_1437(16 - 1 downto 0);
    grp_fu_1253_p2 <= (tmp_5_fu_861_p4 & ap_const_lv8_0);
    grp_fu_1261_p1 <= sext_ln21_7_cast_reg_1432(16 - 1 downto 0);
    grp_fu_1261_p2 <= (tmp_6_fu_904_p4 & ap_const_lv8_0);
    grp_fu_1269_p1 <= sext_ln21_8_cast_reg_1427(16 - 1 downto 0);
    grp_fu_1269_p2 <= (tmp_7_fu_945_p4 & ap_const_lv8_0);
    grp_fu_1277_p1 <= sext_ln21_9_cast_reg_1422(16 - 1 downto 0);
    grp_fu_1277_p2 <= (tmp_8_fu_966_p4 & ap_const_lv8_0);
    grp_fu_1285_p1 <= sext_ln21_10_cast_reg_1417(16 - 1 downto 0);
    grp_fu_1285_p2 <= (tmp_9_fu_986_p4 & ap_const_lv8_0);
    grp_fu_1293_p1 <= sext_ln21_11_cast_reg_1412(16 - 1 downto 0);
    grp_fu_1293_p2 <= (tmp_10_fu_1007_p4 & ap_const_lv8_0);
    grp_fu_1301_p1 <= sext_ln21_12_cast_reg_1407(16 - 1 downto 0);
    grp_fu_1301_p2 <= (tmp_11_fu_1027_p4 & ap_const_lv8_0);
    grp_fu_1309_p1 <= sext_ln21_13_cast_reg_1402(16 - 1 downto 0);
    grp_fu_1309_p2 <= (tmp_12_fu_1048_p4 & ap_const_lv8_0);
    grp_fu_1317_p1 <= sext_ln21_14_cast_reg_1397(16 - 1 downto 0);
    grp_fu_1317_p2 <= (tmp_13_fu_1068_p4 & ap_const_lv8_0);
    grp_fu_1325_p1 <= sext_ln21_15_cast_reg_1392(16 - 1 downto 0);
    grp_fu_1325_p2 <= (tmp_14_fu_1089_p4 & ap_const_lv8_0);
    grp_fu_1333_p1 <= sext_ln21_16_cast_reg_1387(16 - 1 downto 0);
    grp_fu_1333_p2 <= (tmp_15_fu_1109_p4 & ap_const_lv8_0);
    grp_fu_1341_p1 <= sext_ln21_17_cast_reg_1382(16 - 1 downto 0);
    grp_fu_1341_p2 <= (tmp_16_fu_1129_p4 & ap_const_lv8_0);
    grp_fu_1349_p1 <= sext_ln21_18_cast_reg_1377(16 - 1 downto 0);
    grp_fu_1349_p2 <= (tmp_17_fu_1149_p4 & ap_const_lv8_0);
    grp_fu_1357_p1 <= sext_ln21_19_cast_reg_1372(16 - 1 downto 0);
    grp_fu_1357_p2 <= (tmp_18_fu_1166_p4 & ap_const_lv8_0);
    icmp_ln17_fu_552_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";
    mul_ln21_fu_601_p1 <= sext_ln21_cast_reg_1467(16 - 1 downto 0);
    out_Dense_address0 <= zext_ln17_fu_1193_p1(3 - 1 downto 0);

    out_Dense_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_Dense_ce0 <= ap_const_logic_1;
        else 
            out_Dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_Dense_d0 <= std_logic_vector(unsigned(Weights_q0) + unsigned(s_fu_1197_p4));

    out_Dense_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_Dense_we0 <= ap_const_logic_1;
        else 
            out_Dense_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_1197_p1 <= grp_fu_1357_p3;
    s_fu_1197_p4 <= s_fu_1197_p1(23 downto 8);
        sext_ln21_10_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_10),24));

        sext_ln21_11_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_11),24));

        sext_ln21_12_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_12),24));

        sext_ln21_13_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_13),24));

        sext_ln21_14_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_14),24));

        sext_ln21_15_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_15),24));

        sext_ln21_16_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_16),24));

        sext_ln21_17_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_17),24));

        sext_ln21_18_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_18),24));

        sext_ln21_19_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_19),24));

        sext_ln21_1_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_1),24));

        sext_ln21_2_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_2),24));

        sext_ln21_3_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_3),24));

        sext_ln21_4_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_4),24));

        sext_ln21_5_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_5),24));

        sext_ln21_6_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_6),24));

        sext_ln21_7_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_7),24));

        sext_ln21_8_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_8),24));

        sext_ln21_9_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_9),24));

        sext_ln21_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21),24));

    tmp_10_fu_1007_p1 <= grp_fu_1285_p3;
    tmp_10_fu_1007_p4 <= tmp_10_fu_1007_p1(23 downto 8);
    tmp_11_fu_1027_p1 <= grp_fu_1293_p3;
    tmp_11_fu_1027_p4 <= tmp_11_fu_1027_p1(23 downto 8);
    tmp_12_fu_1048_p1 <= grp_fu_1301_p3;
    tmp_12_fu_1048_p4 <= tmp_12_fu_1048_p1(23 downto 8);
    tmp_13_fu_1068_p1 <= grp_fu_1309_p3;
    tmp_13_fu_1068_p4 <= tmp_13_fu_1068_p1(23 downto 8);
    tmp_14_fu_1089_p1 <= grp_fu_1317_p3;
    tmp_14_fu_1089_p4 <= tmp_14_fu_1089_p1(23 downto 8);
    tmp_15_fu_1109_p1 <= grp_fu_1325_p3;
    tmp_15_fu_1109_p4 <= tmp_15_fu_1109_p1(23 downto 8);
    tmp_16_fu_1129_p1 <= grp_fu_1333_p3;
    tmp_16_fu_1129_p4 <= tmp_16_fu_1129_p1(23 downto 8);
    tmp_17_fu_1149_p1 <= grp_fu_1341_p3;
    tmp_17_fu_1149_p4 <= tmp_17_fu_1149_p1(23 downto 8);
    tmp_18_fu_1166_p1 <= grp_fu_1349_p3;
    tmp_18_fu_1166_p4 <= tmp_18_fu_1166_p1(23 downto 8);
    tmp_1_fu_695_p1 <= grp_fu_1213_p3;
    tmp_1_fu_695_p4 <= tmp_1_fu_695_p1(23 downto 8);
    tmp_2_fu_738_p1 <= grp_fu_1221_p3;
    tmp_2_fu_738_p4 <= tmp_2_fu_738_p1(23 downto 8);
    tmp_3_fu_779_p1 <= grp_fu_1229_p3;
    tmp_3_fu_779_p4 <= tmp_3_fu_779_p1(23 downto 8);
    tmp_4_fu_820_p1 <= grp_fu_1237_p3;
    tmp_4_fu_820_p4 <= tmp_4_fu_820_p1(23 downto 8);
    tmp_5_fu_861_p1 <= grp_fu_1245_p3;
    tmp_5_fu_861_p4 <= tmp_5_fu_861_p1(23 downto 8);
    tmp_6_fu_904_p1 <= grp_fu_1253_p3;
    tmp_6_fu_904_p4 <= tmp_6_fu_904_p1(23 downto 8);
    tmp_7_fu_945_p1 <= grp_fu_1261_p3;
    tmp_7_fu_945_p4 <= tmp_7_fu_945_p1(23 downto 8);
    tmp_8_fu_966_p1 <= grp_fu_1269_p3;
    tmp_8_fu_966_p4 <= tmp_8_fu_966_p1(23 downto 8);
    tmp_9_fu_986_p1 <= grp_fu_1277_p3;
    tmp_9_fu_986_p4 <= tmp_9_fu_986_p1(23 downto 8);
    zext_ln17_1_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),14));
    zext_ln17_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1472_pp0_iter1_reg),64));
    zext_ln21_10_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_17_fu_759_p2),64));
    zext_ln21_11_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_19_fu_769_p2),64));
    zext_ln21_12_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_21_fu_800_p2),64));
    zext_ln21_13_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_23_fu_810_p2),64));
    zext_ln21_14_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_25_fu_841_p2),64));
    zext_ln21_15_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_27_fu_851_p2),64));
    zext_ln21_16_cast_fu_882_p3 <= (ap_const_lv11_564 & i_1_reg_1472);
    zext_ln21_16_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_16_cast_fu_882_p3),64));
    zext_ln21_17_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_30_fu_894_p2),64));
    zext_ln21_18_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_32_fu_925_p2),64));
    zext_ln21_19_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_34_fu_935_p2),64));
    zext_ln21_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_581_p2),64));
    zext_ln21_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_2_fu_620_p2),64));
    zext_ln21_3_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_4_fu_630_p2),64));
    zext_ln21_4_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_6_fu_644_p2),64));
    zext_ln21_5_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_8_fu_654_p2),64));
    zext_ln21_6_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_10_fu_675_p2),64));
    zext_ln21_7_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_12_fu_685_p2),64));
    zext_ln21_8_cast_fu_716_p3 <= (ap_const_lv11_55F & i_1_reg_1472);
    zext_ln21_8_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_8_cast_fu_716_p3),64));
    zext_ln21_9_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_15_fu_728_p2),64));
    zext_ln21_cast_fu_568_p3 <= (ap_const_lv11_55A & ap_sig_allocacmp_i_1);
    zext_ln21_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_cast_fu_568_p3),64));
    zext_ln23_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_1183_p2),64));
end behav;
