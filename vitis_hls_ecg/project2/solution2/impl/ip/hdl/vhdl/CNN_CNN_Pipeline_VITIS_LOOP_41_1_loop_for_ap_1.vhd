-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_41_1_loop_for_ap_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv1_ce0 : OUT STD_LOGIC;
    OutPadConv1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv1_ce1 : OUT STD_LOGIC;
    OutPadConv1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv1_ce0 : OUT STD_LOGIC;
    OutConv1_we0 : OUT STD_LOGIC;
    OutConv1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_41_1_loop_for_ap_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_18 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_19 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv7_1A : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv7_1B : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv7_1C : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_const_lv10_144 : STD_LOGIC_VECTOR (9 downto 0) := "0101000100";
    constant ap_const_lv7_1D : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_145 : STD_LOGIC_VECTOR (9 downto 0) := "0101000101";
    constant ap_const_lv7_1E : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_const_lv10_146 : STD_LOGIC_VECTOR (9 downto 0) := "0101000110";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv10_147 : STD_LOGIC_VECTOR (9 downto 0) := "0101000111";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv10_148 : STD_LOGIC_VECTOR (9 downto 0) := "0101001000";
    constant ap_const_lv7_21 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_const_lv10_288 : STD_LOGIC_VECTOR (9 downto 0) := "1010001000";
    constant ap_const_lv7_22 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_const_lv10_289 : STD_LOGIC_VECTOR (9 downto 0) := "1010001001";
    constant ap_const_lv7_23 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_const_lv10_28A : STD_LOGIC_VECTOR (9 downto 0) := "1010001010";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv10_28B : STD_LOGIC_VECTOR (9 downto 0) := "1010001011";
    constant ap_const_lv7_25 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_const_lv10_28C : STD_LOGIC_VECTOR (9 downto 0) := "1010001100";
    constant ap_const_lv7_26 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_const_lv11_3CC : STD_LOGIC_VECTOR (10 downto 0) := "01111001100";
    constant ap_const_lv7_27 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_const_lv11_3CD : STD_LOGIC_VECTOR (10 downto 0) := "01111001101";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_const_lv11_3CE : STD_LOGIC_VECTOR (10 downto 0) := "01111001110";
    constant ap_const_lv7_29 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_const_lv11_3CF : STD_LOGIC_VECTOR (10 downto 0) := "01111001111";
    constant ap_const_lv7_2A : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_const_lv11_3D0 : STD_LOGIC_VECTOR (10 downto 0) := "01111010000";
    constant ap_const_lv7_2B : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal icmp_ln41_reg_1837 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_528 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_533 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_543 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_548 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_553 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_558 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln41_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln41_fu_605_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln41_reg_1841 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln41_reg_1841_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln41_1_fu_619_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln41_1_reg_1851 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_627_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_1856 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_1856_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast72_fu_641_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast72_reg_1862 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_17_reg_1914 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln43_3_fu_770_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln43_3_reg_1939 : STD_LOGIC_VECTOR (9 downto 0);
    signal Weights_load_18_reg_2102 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_11_reg_2107 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln43_2_fu_1072_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln43_2_reg_2132 : STD_LOGIC_VECTOR (10 downto 0);
    signal Weights_load_20_reg_2155 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_13_reg_2160 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_22_reg_2200 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_15_reg_2205 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_24_reg_2245 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_17_reg_2250 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal Weights_load_25_reg_2295 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_18_reg_2300 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_26_reg_2305 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_load_19_reg_2310 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_6_reg_2315 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln49_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln43_1_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_2_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_1_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_4_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln49_3_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_6_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_5_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_8_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln49_7_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_10_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_9_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_12_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln49_11_fu_842_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_14_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_13_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_16_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln49_15_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_18_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_17_fu_927_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_20_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln49_19_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_22_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_21_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_24_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln49_23_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_26_fu_1067_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_25_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_28_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln49_27_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_30_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_29_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_32_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln49_31_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_34_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_33_fu_1191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_36_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln49_35_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_38_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_37_fu_1256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx9_sum_cast_cast_cast_cast_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln51_1_fu_1626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_152 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln49_1_fu_661_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (8 downto 0);
    signal n_fu_156 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten13_fu_160 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln41_fu_587_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln43_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_2_fu_613_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_631_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln49_fu_650_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_2_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln49_fu_706_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln49_4_fu_730_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_5_fu_740_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_7_fu_750_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_8_fu_760_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_10_fu_781_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln49_11_fu_791_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_13_fu_801_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_14_fu_812_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_16_fu_837_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_17_fu_847_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_19_fu_857_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_20_fu_867_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_877_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1645_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_877_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_22_fu_902_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_23_fu_912_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_25_fu_922_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_26_fu_932_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_942_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1654_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_942_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_28_fu_967_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_29_fu_977_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_31_fu_987_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_32_fu_997_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1007_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1663_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_1007_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_34_fu_1032_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_35_fu_1042_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_37_fu_1052_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_38_fu_1062_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_1075_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1672_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_1075_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_40_fu_1100_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln49_41_fu_1110_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_43_fu_1120_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln49_44_fu_1131_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_1141_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1681_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_1141_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_46_fu_1166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln49_47_fu_1176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_49_fu_1186_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln49_50_fu_1196_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_1206_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1690_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_1206_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln49_52_fu_1231_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln49_53_fu_1241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_55_fu_1251_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln49_56_fu_1261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal arrayidx9_sum_fu_1271_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal arrayidx9_sum_cast_cast_cast_fu_1278_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_1287_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1699_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_1287_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1312_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1708_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_1312_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_1335_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1717_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_1335_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1360_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1726_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_1360_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1383_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1735_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_1383_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1408_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1744_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_1408_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1431_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1753_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_1431_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_1456_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1762_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_1456_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_1479_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1771_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_1479_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_1502_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1780_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_1502_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_1525_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1789_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_1525_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_1542_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1798_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_35_fu_1542_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl5_fu_1562_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_1573_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_fu_1584_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1807_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal s_fu_1584_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln51_fu_1593_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i93_i20_fu_1559_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln51_fu_1597_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln43_fu_1580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln51_3_fu_1611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_fu_1616_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_1569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_1_fu_1620_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_1603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_2_fu_1631_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1645_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1654_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1663_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1672_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1681_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1690_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1699_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1708_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1717_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1726_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1735_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1744_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1753_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1762_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1771_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1780_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1789_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1798_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1807_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U17 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => OutPadConv1_q1,
        din1 => Weights_q1,
        dout => mul_ln49_fu_706_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U18 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_q0,
        din1 => Weights_q0,
        din2 => grp_fu_1645_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1645_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U19 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_q1,
        din1 => Weights_q1,
        din2 => grp_fu_1654_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1654_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U20 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_528,
        din1 => reg_523,
        din2 => grp_fu_1663_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1663_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U21 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_528,
        din1 => reg_523,
        din2 => grp_fu_1672_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1672_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U22 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_538,
        din1 => reg_533,
        din2 => grp_fu_1681_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1681_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U23 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_528,
        din1 => reg_523,
        din2 => grp_fu_1690_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1690_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U24 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_548,
        din1 => reg_543,
        din2 => grp_fu_1699_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1699_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U25 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_538,
        din1 => reg_533,
        din2 => grp_fu_1708_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1708_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U26 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_558,
        din1 => reg_553,
        din2 => grp_fu_1717_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1717_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U27 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_528,
        din1 => reg_523,
        din2 => grp_fu_1726_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1726_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U28 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_11_reg_2107,
        din1 => Weights_load_18_reg_2102,
        din2 => grp_fu_1735_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1735_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U29 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_548,
        din1 => reg_543,
        din2 => grp_fu_1744_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1744_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U30 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_13_reg_2160,
        din1 => Weights_load_20_reg_2155,
        din2 => grp_fu_1753_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1753_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U31 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_538,
        din1 => reg_533,
        din2 => grp_fu_1762_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1762_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U32 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_15_reg_2205,
        din1 => Weights_load_22_reg_2200,
        din2 => grp_fu_1771_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1771_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U33 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_558,
        din1 => reg_553,
        din2 => grp_fu_1780_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1780_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U34 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_17_reg_2250,
        din1 => Weights_load_24_reg_2245,
        din2 => grp_fu_1789_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1789_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U35 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_18_reg_2300,
        din1 => Weights_load_25_reg_2295,
        din2 => grp_fu_1798_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1798_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U36 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv1_load_19_reg_2310,
        din1 => Weights_load_26_reg_2305,
        din2 => grp_fu_1807_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1807_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln41_fu_581_p2 = ap_const_lv1_0))) then 
                    indvar_flatten13_fu_160 <= add_ln41_fu_587_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_160 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln41_fu_581_p2 = ap_const_lv1_0))) then 
                    n_fu_156 <= select_ln41_1_fu_619_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_156 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    reg_523_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_523 <= Weights_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_523 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_528 <= OutPadConv1_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_528 <= OutPadConv1_q0;
            end if; 
        end if;
    end process;

    reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_533 <= Weights_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_533 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_538 <= OutPadConv1_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_538 <= OutPadConv1_q0;
            end if; 
        end if;
    end process;

    reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_543 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_543 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_548 <= OutPadConv1_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_548 <= OutPadConv1_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_553 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_553 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_558 <= OutPadConv1_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_558 <= OutPadConv1_q0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln41_fu_581_p2 = ap_const_lv1_0))) then 
                    y_fu_152 <= add_ln49_1_fu_661_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_152 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                OutPadConv1_load_11_reg_2107 <= OutPadConv1_q0;
                Weights_load_18_reg_2102 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                OutPadConv1_load_13_reg_2160 <= OutPadConv1_q0;
                Weights_load_20_reg_2155 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                OutPadConv1_load_15_reg_2205 <= OutPadConv1_q0;
                Weights_load_22_reg_2200 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                OutPadConv1_load_17_reg_2250 <= OutPadConv1_q0;
                Weights_load_24_reg_2245 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                OutPadConv1_load_18_reg_2300 <= OutPadConv1_q1;
                OutPadConv1_load_19_reg_2310 <= OutPadConv1_q0;
                Weights_load_25_reg_2295 <= Weights_q1;
                Weights_load_26_reg_2305 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Weights_load_6_reg_2315 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_1856 <= empty_fu_627_p1;
                empty_reg_1856_pp0_iter1_reg <= empty_reg_1856;
                icmp_ln41_reg_1837 <= icmp_ln41_fu_581_p2;
                    p_cast72_reg_1862(5 downto 2) <= p_cast72_fu_641_p1(5 downto 2);
                select_ln41_1_reg_1851 <= select_ln41_1_fu_619_p3;
                select_ln41_reg_1841 <= select_ln41_fu_605_p3;
                select_ln41_reg_1841_pp0_iter1_reg <= select_ln41_reg_1841;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_17_reg_1914 <= mul_ln49_fu_706_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                    zext_ln43_2_reg_2132(8 downto 0) <= zext_ln43_2_fu_1072_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    zext_ln43_3_reg_1939(8 downto 0) <= zext_ln43_3_fu_770_p1(8 downto 0);
            end if;
        end if;
    end process;
    p_cast72_reg_1862(1 downto 0) <= "00";
    p_cast72_reg_1862(6) <= '0';
    zext_ln43_3_reg_1939(9) <= '0';
    zext_ln43_2_reg_2132(10 downto 9) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    OutConv1_address0 <= zext_ln51_1_fu_1626_p1(11 - 1 downto 0);

    OutConv1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv1_ce0 <= ap_const_logic_1;
        else 
            OutConv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv1_d0 <= 
        ap_const_lv16_0 when (tmp_fu_1603_p3(0) = '1') else 
        add_ln51_2_fu_1631_p2;

    OutConv1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv1_we0 <= ap_const_logic_1;
        else 
            OutConv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln49_1_fu_667_p1, ap_block_pp0_stage1, zext_ln49_5_fu_755_p1, ap_block_pp0_stage2, zext_ln49_9_fu_807_p1, ap_block_pp0_stage3, zext_ln49_13_fu_862_p1, ap_block_pp0_stage4, zext_ln49_17_fu_927_p1, ap_block_pp0_stage5, zext_ln49_21_fu_992_p1, ap_block_pp0_stage6, zext_ln49_25_fu_1057_p1, ap_block_pp0_stage7, zext_ln49_29_fu_1126_p1, ap_block_pp0_stage8, zext_ln49_33_fu_1191_p1, ap_block_pp0_stage9, zext_ln49_37_fu_1256_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                OutPadConv1_address0 <= zext_ln49_37_fu_1256_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                OutPadConv1_address0 <= zext_ln49_33_fu_1191_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                OutPadConv1_address0 <= zext_ln49_29_fu_1126_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                OutPadConv1_address0 <= zext_ln49_25_fu_1057_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                OutPadConv1_address0 <= zext_ln49_21_fu_992_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OutPadConv1_address0 <= zext_ln49_17_fu_927_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OutPadConv1_address0 <= zext_ln49_13_fu_862_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv1_address0 <= zext_ln49_9_fu_807_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv1_address0 <= zext_ln49_5_fu_755_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv1_address0 <= zext_ln49_1_fu_667_p1(11 - 1 downto 0);
            else 
                OutPadConv1_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            OutPadConv1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    OutPadConv1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln43_1_fu_645_p1, ap_block_pp0_stage1, zext_ln49_3_fu_735_p1, ap_block_pp0_stage2, zext_ln49_7_fu_786_p1, ap_block_pp0_stage3, zext_ln49_11_fu_842_p1, ap_block_pp0_stage4, zext_ln49_15_fu_907_p1, ap_block_pp0_stage5, zext_ln49_19_fu_972_p1, ap_block_pp0_stage6, zext_ln49_23_fu_1037_p1, ap_block_pp0_stage7, zext_ln49_27_fu_1105_p1, ap_block_pp0_stage8, zext_ln49_31_fu_1171_p1, ap_block_pp0_stage9, zext_ln49_35_fu_1236_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                OutPadConv1_address1 <= zext_ln49_35_fu_1236_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                OutPadConv1_address1 <= zext_ln49_31_fu_1171_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                OutPadConv1_address1 <= zext_ln49_27_fu_1105_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                OutPadConv1_address1 <= zext_ln49_23_fu_1037_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                OutPadConv1_address1 <= zext_ln49_19_fu_972_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OutPadConv1_address1 <= zext_ln49_15_fu_907_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OutPadConv1_address1 <= zext_ln49_11_fu_842_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv1_address1 <= zext_ln49_7_fu_786_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv1_address1 <= zext_ln49_3_fu_735_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv1_address1 <= zext_ln43_1_fu_645_p1(11 - 1 downto 0);
            else 
                OutPadConv1_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            OutPadConv1_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    OutPadConv1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            OutPadConv1_ce0 <= ap_const_logic_1;
        else 
            OutPadConv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            OutPadConv1_ce1 <= ap_const_logic_1;
        else 
            OutPadConv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln49_2_fu_678_p1, ap_block_pp0_stage1, zext_ln49_6_fu_765_p1, ap_block_pp0_stage2, zext_ln49_10_fu_817_p1, ap_block_pp0_stage3, zext_ln49_14_fu_872_p1, ap_block_pp0_stage4, zext_ln49_18_fu_937_p1, ap_block_pp0_stage5, zext_ln49_22_fu_1002_p1, ap_block_pp0_stage6, zext_ln49_26_fu_1067_p1, ap_block_pp0_stage7, zext_ln49_30_fu_1136_p1, ap_block_pp0_stage8, zext_ln49_34_fu_1201_p1, ap_block_pp0_stage9, zext_ln49_38_fu_1266_p1, arrayidx9_sum_cast_cast_cast_cast_fu_1282_p1, ap_block_pp0_stage10)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Weights_address0 <= arrayidx9_sum_cast_cast_cast_cast_fu_1282_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Weights_address0 <= zext_ln49_38_fu_1266_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Weights_address0 <= zext_ln49_34_fu_1201_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Weights_address0 <= zext_ln49_30_fu_1136_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Weights_address0 <= zext_ln49_26_fu_1067_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Weights_address0 <= zext_ln49_22_fu_1002_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Weights_address0 <= zext_ln49_18_fu_937_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Weights_address0 <= zext_ln49_14_fu_872_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address0 <= zext_ln49_10_fu_817_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address0 <= zext_ln49_6_fu_765_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Weights_address0 <= zext_ln49_2_fu_678_p1(14 - 1 downto 0);
            else 
                Weights_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage1, zext_ln49_fu_656_p1, ap_block_pp0_stage0, zext_ln49_4_fu_745_p1, ap_block_pp0_stage1, zext_ln49_8_fu_796_p1, ap_block_pp0_stage2, zext_ln49_12_fu_852_p1, ap_block_pp0_stage3, zext_ln49_16_fu_917_p1, ap_block_pp0_stage4, zext_ln49_20_fu_982_p1, ap_block_pp0_stage5, zext_ln49_24_fu_1047_p1, ap_block_pp0_stage6, zext_ln49_28_fu_1115_p1, ap_block_pp0_stage7, zext_ln49_32_fu_1181_p1, ap_block_pp0_stage8, zext_ln49_36_fu_1246_p1, ap_block_pp0_stage9)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Weights_address1 <= zext_ln49_36_fu_1246_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Weights_address1 <= zext_ln49_32_fu_1181_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Weights_address1 <= zext_ln49_28_fu_1115_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Weights_address1 <= zext_ln49_24_fu_1047_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Weights_address1 <= zext_ln49_20_fu_982_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Weights_address1 <= zext_ln49_16_fu_917_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Weights_address1 <= zext_ln49_12_fu_852_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address1 <= zext_ln49_8_fu_796_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address1 <= zext_ln49_4_fu_745_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Weights_address1 <= zext_ln49_fu_656_p1(14 - 1 downto 0);
            else 
                Weights_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln41_2_fu_613_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_load) + unsigned(ap_const_lv3_1));
    add_ln41_fu_587_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv11_1));
    add_ln49_10_fu_781_p2 <= std_logic_vector(unsigned(select_ln41_reg_1841) + unsigned(ap_const_lv9_4));
    add_ln49_11_fu_791_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1C));
    add_ln49_13_fu_801_p2 <= std_logic_vector(unsigned(zext_ln43_3_fu_770_p1) + unsigned(ap_const_lv10_144));
    add_ln49_14_fu_812_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1D));
    add_ln49_16_fu_837_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_145));
    add_ln49_17_fu_847_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1E));
    add_ln49_19_fu_857_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_146));
    add_ln49_1_fu_661_p2 <= std_logic_vector(unsigned(select_ln41_fu_605_p3) + unsigned(ap_const_lv9_1));
    add_ln49_20_fu_867_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1F));
    add_ln49_22_fu_902_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_147));
    add_ln49_23_fu_912_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_20));
    add_ln49_25_fu_922_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_148));
    add_ln49_26_fu_932_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_21));
    add_ln49_28_fu_967_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_288));
    add_ln49_29_fu_977_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_22));
    add_ln49_2_fu_672_p2 <= std_logic_vector(unsigned(p_cast72_fu_641_p1) + unsigned(ap_const_lv7_19));
    add_ln49_31_fu_987_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_289));
    add_ln49_32_fu_997_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_23));
    add_ln49_34_fu_1032_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_28A));
    add_ln49_35_fu_1042_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_24));
    add_ln49_37_fu_1052_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_28B));
    add_ln49_38_fu_1062_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_25));
    add_ln49_40_fu_1100_p2 <= std_logic_vector(unsigned(zext_ln43_3_reg_1939) + unsigned(ap_const_lv10_28C));
    add_ln49_41_fu_1110_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_26));
    add_ln49_43_fu_1120_p2 <= std_logic_vector(unsigned(zext_ln43_2_fu_1072_p1) + unsigned(ap_const_lv11_3CC));
    add_ln49_44_fu_1131_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_27));
    add_ln49_46_fu_1166_p2 <= std_logic_vector(unsigned(zext_ln43_2_reg_2132) + unsigned(ap_const_lv11_3CD));
    add_ln49_47_fu_1176_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_28));
    add_ln49_49_fu_1186_p2 <= std_logic_vector(unsigned(zext_ln43_2_reg_2132) + unsigned(ap_const_lv11_3CE));
    add_ln49_4_fu_730_p2 <= std_logic_vector(unsigned(select_ln41_reg_1841) + unsigned(ap_const_lv9_2));
    add_ln49_50_fu_1196_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_29));
    add_ln49_52_fu_1231_p2 <= std_logic_vector(unsigned(zext_ln43_2_reg_2132) + unsigned(ap_const_lv11_3CF));
    add_ln49_53_fu_1241_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_2A));
    add_ln49_55_fu_1251_p2 <= std_logic_vector(unsigned(zext_ln43_2_reg_2132) + unsigned(ap_const_lv11_3D0));
    add_ln49_56_fu_1261_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_2B));
    add_ln49_5_fu_740_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1A));
    add_ln49_7_fu_750_p2 <= std_logic_vector(unsigned(select_ln41_reg_1841) + unsigned(ap_const_lv9_3));
    add_ln49_8_fu_760_p2 <= std_logic_vector(unsigned(p_cast72_reg_1862) + unsigned(ap_const_lv7_1B));
    add_ln49_fu_650_p2 <= std_logic_vector(unsigned(p_cast72_fu_641_p1) + unsigned(ap_const_lv7_18));
    add_ln51_1_fu_1620_p2 <= std_logic_vector(unsigned(zext_ln51_fu_1616_p1) + unsigned(p_shl5_cast_fu_1569_p1));
    add_ln51_2_fu_1631_p2 <= std_logic_vector(signed(Weights_load_6_reg_2315) + signed(s_fu_1584_p4));
    add_ln51_3_fu_1611_p2 <= std_logic_vector(unsigned(zext_ln43_fu_1580_p1) + unsigned(select_ln41_reg_1841_pp0_iter1_reg));
    add_ln51_fu_1597_p2 <= std_logic_vector(signed(sext_ln51_fu_1593_p1) + signed(conv_i_i13_i93_i20_fu_1559_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, icmp_ln41_reg_1837)
    begin
        if (((icmp_ln41_reg_1837 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln41_reg_1837, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln41_reg_1837 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_160)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_160;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_fu_156)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_156;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_152, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_152;
        end if; 
    end process;

    arrayidx9_sum_cast_cast_cast_cast_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx9_sum_cast_cast_cast_fu_1278_p1),64));
        arrayidx9_sum_cast_cast_cast_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(arrayidx9_sum_fu_1271_p3),7));

    arrayidx9_sum_fu_1271_p3 <= (ap_const_lv3_5 & select_ln41_1_reg_1851);
        conv_i_i13_i93_i20_fu_1559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Weights_load_6_reg_2315),17));

    empty_fu_627_p1 <= select_ln41_1_fu_619_p3(2 - 1 downto 0);
    grp_fu_1645_p2 <= (tmp_17_reg_1914 & ap_const_lv8_0);
    grp_fu_1654_p2 <= (tmp_18_fu_877_p4 & ap_const_lv8_0);
    grp_fu_1663_p2 <= (tmp_19_fu_942_p4 & ap_const_lv8_0);
    grp_fu_1672_p2 <= (tmp_20_fu_1007_p4 & ap_const_lv8_0);
    grp_fu_1681_p2 <= (tmp_21_fu_1075_p4 & ap_const_lv8_0);
    grp_fu_1690_p2 <= (tmp_22_fu_1141_p4 & ap_const_lv8_0);
    grp_fu_1699_p2 <= (tmp_23_fu_1206_p4 & ap_const_lv8_0);
    grp_fu_1708_p2 <= (tmp_24_fu_1287_p4 & ap_const_lv8_0);
    grp_fu_1717_p2 <= (tmp_25_fu_1312_p4 & ap_const_lv8_0);
    grp_fu_1726_p2 <= (tmp_26_fu_1335_p4 & ap_const_lv8_0);
    grp_fu_1735_p2 <= (tmp_27_fu_1360_p4 & ap_const_lv8_0);
    grp_fu_1744_p2 <= (tmp_28_fu_1383_p4 & ap_const_lv8_0);
    grp_fu_1753_p2 <= (tmp_29_fu_1408_p4 & ap_const_lv8_0);
    grp_fu_1762_p2 <= (tmp_30_fu_1431_p4 & ap_const_lv8_0);
    grp_fu_1771_p2 <= (tmp_31_fu_1456_p4 & ap_const_lv8_0);
    grp_fu_1780_p2 <= (tmp_32_fu_1479_p4 & ap_const_lv8_0);
    grp_fu_1789_p2 <= (tmp_33_fu_1502_p4 & ap_const_lv8_0);
    grp_fu_1798_p2 <= (tmp_34_fu_1525_p4 & ap_const_lv8_0);
    grp_fu_1807_p2 <= (tmp_35_fu_1542_p4 & ap_const_lv8_0);
    icmp_ln41_fu_581_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv11_500) else "0";
    icmp_ln43_fu_599_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv9_140) else "0";
    p_cast72_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_631_p4),7));
    p_shl5_cast_fu_1569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_1562_p3),11));
    p_shl5_fu_1562_p3 <= (empty_reg_1856_pp0_iter1_reg & ap_const_lv8_0);
    p_shl6_fu_1573_p3 <= (empty_reg_1856_pp0_iter1_reg & ap_const_lv6_0);
    s_fu_1584_p1 <= grp_fu_1807_p3;
    s_fu_1584_p4 <= s_fu_1584_p1(23 downto 8);
    select_ln41_1_fu_619_p3 <= 
        add_ln41_2_fu_613_p2 when (icmp_ln43_fu_599_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
    select_ln41_fu_605_p3 <= 
        ap_const_lv9_0 when (icmp_ln43_fu_599_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
        sext_ln51_fu_1593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_fu_1584_p4),17));

    tmp_18_fu_877_p1 <= grp_fu_1645_p3;
    tmp_18_fu_877_p4 <= tmp_18_fu_877_p1(23 downto 8);
    tmp_19_fu_942_p1 <= grp_fu_1654_p3;
    tmp_19_fu_942_p4 <= tmp_19_fu_942_p1(23 downto 8);
    tmp_1_fu_631_p4 <= ((empty_fu_627_p1 & empty_fu_627_p1) & ap_const_lv2_0);
    tmp_20_fu_1007_p1 <= grp_fu_1663_p3;
    tmp_20_fu_1007_p4 <= tmp_20_fu_1007_p1(23 downto 8);
    tmp_21_fu_1075_p1 <= grp_fu_1672_p3;
    tmp_21_fu_1075_p4 <= tmp_21_fu_1075_p1(23 downto 8);
    tmp_22_fu_1141_p1 <= grp_fu_1681_p3;
    tmp_22_fu_1141_p4 <= tmp_22_fu_1141_p1(23 downto 8);
    tmp_23_fu_1206_p1 <= grp_fu_1690_p3;
    tmp_23_fu_1206_p4 <= tmp_23_fu_1206_p1(23 downto 8);
    tmp_24_fu_1287_p1 <= grp_fu_1699_p3;
    tmp_24_fu_1287_p4 <= tmp_24_fu_1287_p1(23 downto 8);
    tmp_25_fu_1312_p1 <= grp_fu_1708_p3;
    tmp_25_fu_1312_p4 <= tmp_25_fu_1312_p1(23 downto 8);
    tmp_26_fu_1335_p1 <= grp_fu_1717_p3;
    tmp_26_fu_1335_p4 <= tmp_26_fu_1335_p1(23 downto 8);
    tmp_27_fu_1360_p1 <= grp_fu_1726_p3;
    tmp_27_fu_1360_p4 <= tmp_27_fu_1360_p1(23 downto 8);
    tmp_28_fu_1383_p1 <= grp_fu_1735_p3;
    tmp_28_fu_1383_p4 <= tmp_28_fu_1383_p1(23 downto 8);
    tmp_29_fu_1408_p1 <= grp_fu_1744_p3;
    tmp_29_fu_1408_p4 <= tmp_29_fu_1408_p1(23 downto 8);
    tmp_30_fu_1431_p1 <= grp_fu_1753_p3;
    tmp_30_fu_1431_p4 <= tmp_30_fu_1431_p1(23 downto 8);
    tmp_31_fu_1456_p1 <= grp_fu_1762_p3;
    tmp_31_fu_1456_p4 <= tmp_31_fu_1456_p1(23 downto 8);
    tmp_32_fu_1479_p1 <= grp_fu_1771_p3;
    tmp_32_fu_1479_p4 <= tmp_32_fu_1479_p1(23 downto 8);
    tmp_33_fu_1502_p1 <= grp_fu_1780_p3;
    tmp_33_fu_1502_p4 <= tmp_33_fu_1502_p1(23 downto 8);
    tmp_34_fu_1525_p1 <= grp_fu_1789_p3;
    tmp_34_fu_1525_p4 <= tmp_34_fu_1525_p1(23 downto 8);
    tmp_35_fu_1542_p1 <= grp_fu_1798_p3;
    tmp_35_fu_1542_p4 <= tmp_35_fu_1542_p1(23 downto 8);
    tmp_fu_1603_p3 <= add_ln51_fu_1597_p2(16 downto 16);
    zext_ln43_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_fu_605_p3),64));
    zext_ln43_2_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_reg_1841),11));
    zext_ln43_3_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_reg_1841),10));
    zext_ln43_fu_1580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_1573_p3),9));
    zext_ln49_10_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_14_fu_812_p2),64));
    zext_ln49_11_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_16_fu_837_p2),64));
    zext_ln49_12_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_17_fu_847_p2),64));
    zext_ln49_13_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_19_fu_857_p2),64));
    zext_ln49_14_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_20_fu_867_p2),64));
    zext_ln49_15_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_22_fu_902_p2),64));
    zext_ln49_16_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_23_fu_912_p2),64));
    zext_ln49_17_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_25_fu_922_p2),64));
    zext_ln49_18_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_26_fu_932_p2),64));
    zext_ln49_19_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_28_fu_967_p2),64));
    zext_ln49_1_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_1_fu_661_p2),64));
    zext_ln49_20_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_29_fu_977_p2),64));
    zext_ln49_21_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_31_fu_987_p2),64));
    zext_ln49_22_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_32_fu_997_p2),64));
    zext_ln49_23_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_34_fu_1032_p2),64));
    zext_ln49_24_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_35_fu_1042_p2),64));
    zext_ln49_25_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_37_fu_1052_p2),64));
    zext_ln49_26_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_38_fu_1062_p2),64));
    zext_ln49_27_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_40_fu_1100_p2),64));
    zext_ln49_28_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_41_fu_1110_p2),64));
    zext_ln49_29_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_43_fu_1120_p2),64));
    zext_ln49_2_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_2_fu_672_p2),64));
    zext_ln49_30_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_44_fu_1131_p2),64));
    zext_ln49_31_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_46_fu_1166_p2),64));
    zext_ln49_32_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_47_fu_1176_p2),64));
    zext_ln49_33_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_49_fu_1186_p2),64));
    zext_ln49_34_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_50_fu_1196_p2),64));
    zext_ln49_35_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_52_fu_1231_p2),64));
    zext_ln49_36_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_53_fu_1241_p2),64));
    zext_ln49_37_fu_1256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_55_fu_1251_p2),64));
    zext_ln49_38_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_56_fu_1261_p2),64));
    zext_ln49_3_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_4_fu_730_p2),64));
    zext_ln49_4_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_5_fu_740_p2),64));
    zext_ln49_5_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_7_fu_750_p2),64));
    zext_ln49_6_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_8_fu_760_p2),64));
    zext_ln49_7_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_10_fu_781_p2),64));
    zext_ln49_8_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_11_fu_791_p2),64));
    zext_ln49_9_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_13_fu_801_p2),64));
    zext_ln49_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln49_fu_650_p2),64));
    zext_ln51_1_fu_1626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_1_fu_1620_p2),64));
    zext_ln51_fu_1616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_3_fu_1611_p2),11));
end behav;
