// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPool3_9_address0,
        OutPool3_9_ce0,
        OutPool3_9_we0,
        OutPool3_9_d0,
        OutPool3_8_address0,
        OutPool3_8_ce0,
        OutPool3_8_we0,
        OutPool3_8_d0,
        OutPool3_7_address0,
        OutPool3_7_ce0,
        OutPool3_7_we0,
        OutPool3_7_d0,
        OutPool3_6_address0,
        OutPool3_6_ce0,
        OutPool3_6_we0,
        OutPool3_6_d0,
        OutPool3_5_address0,
        OutPool3_5_ce0,
        OutPool3_5_we0,
        OutPool3_5_d0,
        OutPool3_4_address0,
        OutPool3_4_ce0,
        OutPool3_4_we0,
        OutPool3_4_d0,
        OutPool3_3_address0,
        OutPool3_3_ce0,
        OutPool3_3_we0,
        OutPool3_3_d0,
        OutPool3_2_address0,
        OutPool3_2_ce0,
        OutPool3_2_we0,
        OutPool3_2_d0,
        OutPool3_1_address0,
        OutPool3_1_ce0,
        OutPool3_1_we0,
        OutPool3_1_d0,
        OutPool3_address0,
        OutPool3_ce0,
        OutPool3_we0,
        OutPool3_d0,
        OutConv7_address0,
        OutConv7_ce0,
        OutConv7_q0,
        OutConv7_address1,
        OutConv7_ce1,
        OutConv7_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] OutPool3_9_address0;
output   OutPool3_9_ce0;
output   OutPool3_9_we0;
output  [15:0] OutPool3_9_d0;
output  [5:0] OutPool3_8_address0;
output   OutPool3_8_ce0;
output   OutPool3_8_we0;
output  [15:0] OutPool3_8_d0;
output  [5:0] OutPool3_7_address0;
output   OutPool3_7_ce0;
output   OutPool3_7_we0;
output  [15:0] OutPool3_7_d0;
output  [5:0] OutPool3_6_address0;
output   OutPool3_6_ce0;
output   OutPool3_6_we0;
output  [15:0] OutPool3_6_d0;
output  [5:0] OutPool3_5_address0;
output   OutPool3_5_ce0;
output   OutPool3_5_we0;
output  [15:0] OutPool3_5_d0;
output  [5:0] OutPool3_4_address0;
output   OutPool3_4_ce0;
output   OutPool3_4_we0;
output  [15:0] OutPool3_4_d0;
output  [5:0] OutPool3_3_address0;
output   OutPool3_3_ce0;
output   OutPool3_3_we0;
output  [15:0] OutPool3_3_d0;
output  [5:0] OutPool3_2_address0;
output   OutPool3_2_ce0;
output   OutPool3_2_we0;
output  [15:0] OutPool3_2_d0;
output  [5:0] OutPool3_1_address0;
output   OutPool3_1_ce0;
output   OutPool3_1_we0;
output  [15:0] OutPool3_1_d0;
output  [5:0] OutPool3_address0;
output   OutPool3_ce0;
output   OutPool3_we0;
output  [15:0] OutPool3_d0;
output  [10:0] OutConv7_address0;
output   OutConv7_ce0;
input  [15:0] OutConv7_q0;
output  [10:0] OutConv7_address1;
output   OutConv7_ce1;
input  [15:0] OutConv7_q1;

reg ap_idle;
reg OutPool3_9_ce0;
reg OutPool3_9_we0;
reg OutPool3_8_ce0;
reg OutPool3_8_we0;
reg OutPool3_7_ce0;
reg OutPool3_7_we0;
reg OutPool3_6_ce0;
reg OutPool3_6_we0;
reg OutPool3_5_ce0;
reg OutPool3_5_we0;
reg OutPool3_4_ce0;
reg OutPool3_4_we0;
reg OutPool3_3_ce0;
reg OutPool3_3_we0;
reg OutPool3_2_ce0;
reg OutPool3_2_we0;
reg OutPool3_1_ce0;
reg OutPool3_1_we0;
reg OutPool3_ce0;
reg OutPool3_we0;
reg OutConv7_ce0;
reg OutConv7_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln74_fu_285_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln77_fu_300_p2;
reg   [0:0] icmp_ln77_reg_538;
reg   [0:0] icmp_ln77_reg_538_pp0_iter1_reg;
reg   [0:0] icmp_ln77_reg_538_pp0_iter2_reg;
reg   [0:0] icmp_ln77_reg_538_pp0_iter3_reg;
reg   [0:0] icmp_ln77_reg_538_pp0_iter4_reg;
wire   [4:0] select_ln74_fu_306_p3;
reg   [4:0] select_ln74_reg_543;
reg   [4:0] select_ln74_reg_543_pp0_iter1_reg;
reg   [4:0] select_ln74_reg_543_pp0_iter2_reg;
reg   [4:0] select_ln74_reg_543_pp0_iter3_reg;
reg   [4:0] select_ln74_reg_543_pp0_iter4_reg;
reg   [4:0] select_ln74_reg_543_pp0_iter5_reg;
wire   [5:0] select_ln74_1_fu_345_p3;
reg   [5:0] select_ln74_1_reg_550;
wire   [4:0] empty_fu_352_p1;
reg   [4:0] empty_reg_555;
wire   [5:0] add_ln86_fu_456_p2;
reg   [5:0] add_ln86_reg_571;
reg   [5:0] add_ln86_reg_571_pp0_iter7_reg;
wire   [15:0] max_fu_468_p3;
reg   [15:0] max_reg_576;
reg   [15:0] pool_value_1_reg_582;
wire   [63:0] zext_ln82_fu_406_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln82_1_fu_423_p1;
wire   [63:0] zext_ln86_2_fu_496_p1;
reg   [4:0] y_fu_100;
wire   [4:0] add_ln87_fu_320_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_y_load;
reg   [5:0] z_fu_104;
reg   [9:0] indvar_flatten242_fu_108;
wire   [9:0] add_ln74_fu_291_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten242_load;
wire   [3:0] trunc_ln86_fu_509_p1;
wire   [15:0] max_1_fu_480_p3;
wire   [5:0] add_ln74_1_fu_339_p2;
wire   [9:0] p_shl_fu_361_p3;
wire   [7:0] p_shl1_fu_372_p3;
wire   [10:0] p_shl58_cast_fu_368_p1;
wire   [10:0] p_shl59_cast_fu_379_p1;
wire   [5:0] tmp_s_fu_389_p3;
wire   [10:0] zext_ln81_fu_396_p1;
wire   [10:0] empty_152_fu_383_p2;
wire   [10:0] add_ln81_fu_400_p2;
wire   [10:0] or_ln81_fu_411_p2;
wire   [10:0] add_ln81_1_fu_417_p2;
wire   [4:0] mul_ln86_fu_436_p0;
wire   [6:0] mul_ln86_fu_436_p1;
wire   [10:0] mul_ln86_fu_436_p2;
wire   [1:0] tmp_fu_442_p4;
wire   [5:0] zext_ln86_1_fu_452_p1;
wire   [5:0] shl_ln86_fu_428_p2;
wire   [0:0] icmp_ln83_fu_462_p2;
wire   [0:0] icmp_ln83_1_fu_476_p2;
wire   [3:0] grp_fu_314_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] mul_ln86_fu_436_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 y_fu_100 = 5'd0;
#0 z_fu_104 = 6'd0;
#0 indvar_flatten242_fu_108 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_urem_5ns_5ns_4_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 4 ))
urem_5ns_5ns_4_9_1_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln74_fu_306_p3),
    .din1(5'd10),
    .ce(1'b1),
    .dout(grp_fu_314_p2)
);

CNN_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U195(
    .din0(mul_ln86_fu_436_p0),
    .din1(mul_ln86_fu_436_p1),
    .dout(mul_ln86_fu_436_p2)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln74_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten242_fu_108 <= add_ln74_fu_291_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten242_fu_108 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln74_fu_285_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_100 <= add_ln87_fu_320_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_100 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            z_fu_104 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            z_fu_104 <= select_ln74_1_fu_345_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln86_reg_571 <= add_ln86_fu_456_p2;
        add_ln86_reg_571_pp0_iter7_reg <= add_ln86_reg_571;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        empty_reg_555 <= empty_fu_352_p1;
        icmp_ln77_reg_538_pp0_iter2_reg <= icmp_ln77_reg_538_pp0_iter1_reg;
        icmp_ln77_reg_538_pp0_iter3_reg <= icmp_ln77_reg_538_pp0_iter2_reg;
        icmp_ln77_reg_538_pp0_iter4_reg <= icmp_ln77_reg_538_pp0_iter3_reg;
        max_reg_576 <= max_fu_468_p3;
        select_ln74_1_reg_550 <= select_ln74_1_fu_345_p3;
        select_ln74_reg_543_pp0_iter2_reg <= select_ln74_reg_543_pp0_iter1_reg;
        select_ln74_reg_543_pp0_iter3_reg <= select_ln74_reg_543_pp0_iter2_reg;
        select_ln74_reg_543_pp0_iter4_reg <= select_ln74_reg_543_pp0_iter3_reg;
        select_ln74_reg_543_pp0_iter5_reg <= select_ln74_reg_543_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln77_reg_538 <= icmp_ln77_fu_300_p2;
        icmp_ln77_reg_538_pp0_iter1_reg <= icmp_ln77_reg_538;
        select_ln74_reg_543 <= select_ln74_fu_306_p3;
        select_ln74_reg_543_pp0_iter1_reg <= select_ln74_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        pool_value_1_reg_582 <= OutConv7_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        OutConv7_ce0 = 1'b1;
    end else begin
        OutConv7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        OutConv7_ce1 = 1'b1;
    end else begin
        OutConv7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_1_ce0 = 1'b1;
    end else begin
        OutPool3_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd1))) begin
        OutPool3_1_we0 = 1'b1;
    end else begin
        OutPool3_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_2_ce0 = 1'b1;
    end else begin
        OutPool3_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd2))) begin
        OutPool3_2_we0 = 1'b1;
    end else begin
        OutPool3_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_3_ce0 = 1'b1;
    end else begin
        OutPool3_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd3))) begin
        OutPool3_3_we0 = 1'b1;
    end else begin
        OutPool3_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_4_ce0 = 1'b1;
    end else begin
        OutPool3_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd4))) begin
        OutPool3_4_we0 = 1'b1;
    end else begin
        OutPool3_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_5_ce0 = 1'b1;
    end else begin
        OutPool3_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd5))) begin
        OutPool3_5_we0 = 1'b1;
    end else begin
        OutPool3_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_6_ce0 = 1'b1;
    end else begin
        OutPool3_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd6))) begin
        OutPool3_6_we0 = 1'b1;
    end else begin
        OutPool3_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_7_ce0 = 1'b1;
    end else begin
        OutPool3_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd7))) begin
        OutPool3_7_we0 = 1'b1;
    end else begin
        OutPool3_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_8_ce0 = 1'b1;
    end else begin
        OutPool3_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd8))) begin
        OutPool3_8_we0 = 1'b1;
    end else begin
        OutPool3_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_9_ce0 = 1'b1;
    end else begin
        OutPool3_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln86_fu_509_p1 == 4'd0) & ~(trunc_ln86_fu_509_p1 == 4'd1) & ~(trunc_ln86_fu_509_p1 == 4'd2) & ~(trunc_ln86_fu_509_p1 == 4'd3) & ~(trunc_ln86_fu_509_p1 == 4'd4) & ~(trunc_ln86_fu_509_p1 == 4'd5) & ~(trunc_ln86_fu_509_p1 == 4'd6) & ~(trunc_ln86_fu_509_p1 == 4'd7) & ~(trunc_ln86_fu_509_p1 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_9_we0 = 1'b1;
    end else begin
        OutPool3_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        OutPool3_ce0 = 1'b1;
    end else begin
        OutPool3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln86_fu_509_p1 == 4'd0))) begin
        OutPool3_we0 = 1'b1;
    end else begin
        OutPool3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_285_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten242_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten242_load = indvar_flatten242_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_y_load = 5'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_100;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv7_address0 = zext_ln82_1_fu_423_p1;

assign OutConv7_address1 = zext_ln82_fu_406_p1;

assign OutPool3_1_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_1_d0 = max_1_fu_480_p3;

assign OutPool3_2_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_2_d0 = max_1_fu_480_p3;

assign OutPool3_3_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_3_d0 = max_1_fu_480_p3;

assign OutPool3_4_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_4_d0 = max_1_fu_480_p3;

assign OutPool3_5_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_5_d0 = max_1_fu_480_p3;

assign OutPool3_6_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_6_d0 = max_1_fu_480_p3;

assign OutPool3_7_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_7_d0 = max_1_fu_480_p3;

assign OutPool3_8_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_8_d0 = max_1_fu_480_p3;

assign OutPool3_9_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_9_d0 = max_1_fu_480_p3;

assign OutPool3_address0 = zext_ln86_2_fu_496_p1;

assign OutPool3_d0 = max_1_fu_480_p3;

assign add_ln74_1_fu_339_p2 = (z_fu_104 + 6'd1);

assign add_ln74_fu_291_p2 = (ap_sig_allocacmp_indvar_flatten242_load + 10'd1);

assign add_ln81_1_fu_417_p2 = (zext_ln81_fu_396_p1 + or_ln81_fu_411_p2);

assign add_ln81_fu_400_p2 = (zext_ln81_fu_396_p1 + empty_152_fu_383_p2);

assign add_ln86_fu_456_p2 = (zext_ln86_1_fu_452_p1 + shl_ln86_fu_428_p2);

assign add_ln87_fu_320_p2 = (select_ln74_fu_306_p3 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_152_fu_383_p2 = (p_shl58_cast_fu_368_p1 + p_shl59_cast_fu_379_p1);

assign empty_fu_352_p1 = select_ln74_1_fu_345_p3[4:0];

assign icmp_ln74_fu_285_p2 = ((ap_sig_allocacmp_indvar_flatten242_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_300_p2 = ((ap_sig_allocacmp_y_load == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_476_p2 = (($signed(pool_value_1_reg_582) > $signed(max_reg_576)) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_462_p2 = (($signed(OutConv7_q1) > $signed(16'd62976)) ? 1'b1 : 1'b0);

assign max_1_fu_480_p3 = ((icmp_ln83_1_fu_476_p2[0:0] == 1'b1) ? pool_value_1_reg_582 : max_reg_576);

assign max_fu_468_p3 = ((icmp_ln83_fu_462_p2[0:0] == 1'b1) ? OutConv7_q1 : 16'd62976);

assign mul_ln86_fu_436_p0 = mul_ln86_fu_436_p00;

assign mul_ln86_fu_436_p00 = select_ln74_reg_543_pp0_iter5_reg;

assign mul_ln86_fu_436_p1 = 11'd52;

assign or_ln81_fu_411_p2 = (empty_152_fu_383_p2 | 11'd1);

assign p_shl1_fu_372_p3 = {{empty_reg_555}, {3'd0}};

assign p_shl58_cast_fu_368_p1 = p_shl_fu_361_p3;

assign p_shl59_cast_fu_379_p1 = p_shl1_fu_372_p3;

assign p_shl_fu_361_p3 = {{empty_reg_555}, {5'd0}};

assign select_ln74_1_fu_345_p3 = ((icmp_ln77_reg_538_pp0_iter4_reg[0:0] == 1'b1) ? add_ln74_1_fu_339_p2 : z_fu_104);

assign select_ln74_fu_306_p3 = ((icmp_ln77_fu_300_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_y_load);

assign shl_ln86_fu_428_p2 = select_ln74_1_reg_550 << 6'd1;

assign tmp_fu_442_p4 = {{mul_ln86_fu_436_p2[10:9]}};

assign tmp_s_fu_389_p3 = {{select_ln74_reg_543_pp0_iter5_reg}, {1'd0}};

assign trunc_ln86_fu_509_p1 = grp_fu_314_p2[3:0];

assign zext_ln81_fu_396_p1 = tmp_s_fu_389_p3;

assign zext_ln82_1_fu_423_p1 = add_ln81_1_fu_417_p2;

assign zext_ln82_fu_406_p1 = add_ln81_fu_400_p2;

assign zext_ln86_1_fu_452_p1 = tmp_fu_442_p4;

assign zext_ln86_2_fu_496_p1 = add_ln86_reg_571_pp0_iter7_reg;

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3
