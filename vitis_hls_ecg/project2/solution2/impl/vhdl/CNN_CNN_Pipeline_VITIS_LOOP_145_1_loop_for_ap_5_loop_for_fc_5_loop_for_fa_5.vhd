-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_145_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv5_ce0 : OUT STD_LOGIC;
    OutPadConv5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv5_ce0 : OUT STD_LOGIC;
    OutConv5_we0 : OUT STD_LOGIC;
    OutConv5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_145_1_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv14_1900 : STD_LOGIC_VECTOR (13 downto 0) := "01100100000000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4EC : STD_LOGIC_VECTOR (10 downto 0) := "10011101100";
    constant ap_const_lv12_9EC : STD_LOGIC_VECTOR (11 downto 0) := "100111101100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_54 : STD_LOGIC_VECTOR (10 downto 0) := "00001010100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln145_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln147_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_reg_753_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_reg_753_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln145_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln145_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln145_1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln145_1_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln145_1_reg_771_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln145_1_reg_771_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_reg_777_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln148_fu_371_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln148_reg_783 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln148_reg_783_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln150_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln150_reg_789 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln150_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_161_fu_391_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_161_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_161_reg_795_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln152_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_800_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_804_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln145_1_fu_442_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln145_1_reg_808 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln145_1_reg_808_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln145_1_reg_808_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln153_3_fu_552_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln153_3_reg_818 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln155_1_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_reg_823 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_reg_823_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_reg_823_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_reg_823_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_reg_823_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Weights_load_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln153_4_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln153_1_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx37_sum_cast_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_fu_98 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal s_3_fu_625_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_s_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_102 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln152_fu_395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_106 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln150_fu_379_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten83_fu_110 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln150_1_fu_278_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_114 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln147_1_fu_455_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten98_fu_118 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal select_ln147_3_fu_292_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_fu_122 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten122_fu_126 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln145_fu_236_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln150_1_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln147_1_fu_286_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln147_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln145_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln147_1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln147_fu_327_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln147_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln145_1_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln145_fu_429_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln147_fu_449_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_fu_462_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl21_fu_478_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl37_cast_fu_474_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl38_cast_fu_486_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl22_fu_500_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln152_1_fu_514_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln153_fu_517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_160_fu_490_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_2_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln152_fu_511_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_5_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl39_cast_fu_507_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_6_fu_542_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln153_3_fu_548_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln153_2_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln147_fu_496_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_675_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln145_fu_590_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal arrayidx37_sum_fu_593_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln147_2_fu_607_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_3_fu_625_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_684_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln155_fu_634_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i93_i298_fu_622_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln155_fu_638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_2_fu_656_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_675_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_684_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_675_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_675_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_5ns_7ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_7ns_7ns_11_4_1_U169 : component CNN_mac_muladd_5ns_7ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_675_p0,
        din1 => grp_fu_675_p1,
        din2 => grp_fu_675_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U170 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv5_q0,
        din1 => Weights_q1,
        din2 => grp_fu_684_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_684_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten122_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten122_fu_126 <= ap_const_lv17_0;
                elsif (((icmp_ln145_fu_230_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten122_fu_126 <= add_ln145_fu_236_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten83_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten83_fu_110 <= ap_const_lv8_0;
                elsif (((icmp_ln145_fu_230_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten83_fu_110 <= select_ln150_1_fu_278_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten98_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten98_fu_118 <= ap_const_lv14_0;
                elsif (((icmp_ln145_fu_230_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten98_fu_118 <= select_ln147_3_fu_292_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_102 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_102 <= add_ln152_fu_395_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_106 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_106 <= select_ln150_fu_379_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n_fu_122 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    n_fu_122 <= select_ln145_1_fu_442_p3;
                end if;
            end if; 
        end if;
    end process;

    s_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    s_fu_98 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    s_fu_98 <= s_3_fu_625_p1(23 downto 8);
                end if;
            end if; 
        end if;
    end process;

    y_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_114 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    y_fu_114 <= select_ln147_1_fu_455_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                Weights_load_reg_853 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln153_3_reg_818 <= add_ln153_3_fu_552_p2;
                add_ln155_1_reg_823 <= add_ln155_1_fu_558_p2;
                add_ln155_1_reg_823_pp0_iter5_reg <= add_ln155_1_reg_823;
                add_ln155_1_reg_823_pp0_iter6_reg <= add_ln155_1_reg_823_pp0_iter5_reg;
                add_ln155_1_reg_823_pp0_iter7_reg <= add_ln155_1_reg_823_pp0_iter6_reg;
                add_ln155_1_reg_823_pp0_iter8_reg <= add_ln155_1_reg_823_pp0_iter7_reg;
                and_ln145_1_reg_771_pp0_iter2_reg <= and_ln145_1_reg_771;
                and_ln145_1_reg_771_pp0_iter3_reg <= and_ln145_1_reg_771_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                empty_161_reg_795 <= empty_161_fu_391_p1;
                empty_161_reg_795_pp0_iter3_reg <= empty_161_reg_795;
                icmp_ln147_reg_753_pp0_iter2_reg <= icmp_ln147_reg_753;
                icmp_ln147_reg_753_pp0_iter3_reg <= icmp_ln147_reg_753_pp0_iter2_reg;
                icmp_ln150_1_reg_804 <= icmp_ln150_1_fu_407_p2;
                icmp_ln150_1_reg_804_pp0_iter3_reg <= icmp_ln150_1_reg_804;
                icmp_ln150_1_reg_804_pp0_iter4_reg <= icmp_ln150_1_reg_804_pp0_iter3_reg;
                icmp_ln150_1_reg_804_pp0_iter5_reg <= icmp_ln150_1_reg_804_pp0_iter4_reg;
                icmp_ln150_1_reg_804_pp0_iter6_reg <= icmp_ln150_1_reg_804_pp0_iter5_reg;
                icmp_ln150_1_reg_804_pp0_iter7_reg <= icmp_ln150_1_reg_804_pp0_iter6_reg;
                icmp_ln150_1_reg_804_pp0_iter8_reg <= icmp_ln150_1_reg_804_pp0_iter7_reg;
                icmp_ln152_1_reg_800 <= icmp_ln152_1_fu_401_p2;
                icmp_ln152_1_reg_800_pp0_iter3_reg <= icmp_ln152_1_reg_800;
                icmp_ln152_1_reg_800_pp0_iter4_reg <= icmp_ln152_1_reg_800_pp0_iter3_reg;
                icmp_ln152_1_reg_800_pp0_iter5_reg <= icmp_ln152_1_reg_800_pp0_iter4_reg;
                icmp_ln152_1_reg_800_pp0_iter6_reg <= icmp_ln152_1_reg_800_pp0_iter5_reg;
                icmp_ln152_1_reg_800_pp0_iter7_reg <= icmp_ln152_1_reg_800_pp0_iter6_reg;
                icmp_ln152_1_reg_800_pp0_iter8_reg <= icmp_ln152_1_reg_800_pp0_iter7_reg;
                or_ln147_reg_777_pp0_iter2_reg <= or_ln147_reg_777;
                or_ln147_reg_777_pp0_iter3_reg <= or_ln147_reg_777_pp0_iter2_reg;
                or_ln147_reg_777_pp0_iter4_reg <= or_ln147_reg_777_pp0_iter3_reg;
                or_ln147_reg_777_pp0_iter5_reg <= or_ln147_reg_777_pp0_iter4_reg;
                or_ln147_reg_777_pp0_iter6_reg <= or_ln147_reg_777_pp0_iter5_reg;
                or_ln147_reg_777_pp0_iter7_reg <= or_ln147_reg_777_pp0_iter6_reg;
                select_ln145_1_reg_808 <= select_ln145_1_fu_442_p3;
                select_ln145_1_reg_808_pp0_iter5_reg <= select_ln145_1_reg_808;
                select_ln145_1_reg_808_pp0_iter6_reg <= select_ln145_1_reg_808_pp0_iter5_reg;
                select_ln148_reg_783 <= select_ln148_fu_371_p3;
                select_ln148_reg_783_pp0_iter3_reg <= select_ln148_reg_783;
                    zext_ln150_reg_789(4 downto 0) <= zext_ln150_fu_387_p1(4 downto 0);
                    zext_ln150_reg_789_pp0_iter3_reg(4 downto 0) <= zext_ln150_reg_789(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln145_1_reg_771 <= and_ln145_1_fu_260_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln147_reg_753 <= icmp_ln147_fu_242_p2;
                icmp_ln150_reg_766 <= icmp_ln150_fu_254_p2;
                or_ln147_reg_777 <= or_ln147_fu_266_p2;
                xor_ln145_reg_761 <= xor_ln145_fu_248_p2;
            end if;
        end if;
    end process;
    zext_ln150_reg_789(10 downto 5) <= "000000";
    zext_ln150_reg_789_pp0_iter3_reg(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv5_address0 <= zext_ln155_fu_652_p1(11 - 1 downto 0);

    OutConv5_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            OutConv5_ce0 <= ap_const_logic_1;
        else 
            OutConv5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv5_d0 <= 
        ap_const_lv16_0 when (tmp_fu_644_p3(0) = '1') else 
        add_ln155_2_fu_656_p2;

    OutConv5_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, icmp_ln152_1_reg_800_pp0_iter8_reg, icmp_ln150_1_reg_804_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln150_1_reg_804_pp0_iter8_reg = ap_const_lv1_1) and (icmp_ln152_1_reg_800_pp0_iter8_reg = ap_const_lv1_1))) then 
            OutConv5_we0 <= ap_const_logic_1;
        else 
            OutConv5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv5_address0 <= zext_ln153_1_fu_574_p1(11 - 1 downto 0);

    OutPadConv5_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            OutPadConv5_ce0 <= ap_const_logic_1;
        else 
            OutPadConv5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= arrayidx37_sum_cast_fu_599_p1(14 - 1 downto 0);
    Weights_address1 <= zext_ln153_4_fu_578_p1(14 - 1 downto 0);

    Weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln145_1_fu_436_p2 <= std_logic_vector(unsigned(n_fu_122) + unsigned(ap_const_lv5_1));
    add_ln145_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten122_fu_126) + unsigned(ap_const_lv17_1));
    add_ln147_1_fu_286_p2 <= std_logic_vector(unsigned(indvar_flatten98_fu_118) + unsigned(ap_const_lv14_1));
    add_ln147_fu_449_p2 <= std_logic_vector(unsigned(select_ln145_fu_429_p3) + unsigned(ap_const_lv7_1));
    add_ln150_1_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten83_fu_110) + unsigned(ap_const_lv8_1));
    add_ln150_fu_355_p2 <= std_logic_vector(unsigned(select_ln147_fu_327_p3) + unsigned(ap_const_lv5_1));
    add_ln152_fu_395_p2 <= std_logic_vector(unsigned(select_ln148_fu_371_p3) + unsigned(ap_const_lv3_1));
    add_ln153_2_fu_527_p2 <= std_logic_vector(unsigned(empty_160_fu_490_p2) + unsigned(zext_ln150_reg_789_pp0_iter3_reg));
    add_ln153_3_fu_552_p2 <= std_logic_vector(unsigned(zext_ln153_3_fu_548_p1) + unsigned(zext_ln153_2_fu_532_p1));
    add_ln153_5_fu_536_p2 <= std_logic_vector(unsigned(zext_ln152_fu_511_p1) + unsigned(ap_const_lv11_4EC));
    add_ln153_6_fu_542_p2 <= std_logic_vector(unsigned(add_ln153_5_fu_536_p2) + unsigned(p_shl39_cast_fu_507_p1));
    add_ln153_fu_517_p2 <= std_logic_vector(unsigned(select_ln147_1_fu_455_p3) + unsigned(zext_ln152_1_fu_514_p1));
    add_ln155_1_fu_558_p2 <= std_logic_vector(unsigned(zext_ln147_fu_496_p1) + unsigned(empty_160_fu_490_p2));
    add_ln155_2_fu_656_p2 <= std_logic_vector(signed(Weights_load_reg_853) + signed(s_3_fu_625_p4));
    add_ln155_fu_638_p2 <= std_logic_vector(signed(sext_ln155_fu_634_p1) + signed(conv_i_i13_i93_i298_fu_622_p1));
    and_ln145_1_fu_260_p2 <= (xor_ln145_fu_248_p2 and icmp_ln150_fu_254_p2);
    and_ln145_fu_344_p2 <= (xor_ln145_reg_761 and icmp_ln152_fu_321_p2);
    and_ln147_fu_349_p2 <= (or_ln147_1_fu_339_p2 and and_ln145_fu_344_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln145_fu_230_p2)
    begin
        if (((icmp_ln145_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, s_fu_98, s_3_fu_625_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ap_sig_allocacmp_s_load <= s_3_fu_625_p1(23 downto 8);
        else 
            ap_sig_allocacmp_s_load <= s_fu_98;
        end if; 
    end process;

    arrayidx37_sum_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx37_sum_fu_593_p2),64));
    arrayidx37_sum_fu_593_p2 <= std_logic_vector(unsigned(zext_ln145_fu_590_p1) + unsigned(ap_const_lv12_9EC));
        conv_i_i13_i93_i298_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Weights_load_reg_853),17));

    empty_160_fu_490_p2 <= std_logic_vector(unsigned(p_shl37_cast_fu_474_p1) + unsigned(p_shl38_cast_fu_486_p1));
    empty_161_fu_391_p1 <= select_ln150_fu_379_p3(4 - 1 downto 0);
    empty_fu_462_p1 <= select_ln145_1_fu_442_p3(4 - 1 downto 0);
    grp_fu_675_p0 <= grp_fu_675_p00(5 - 1 downto 0);
    grp_fu_675_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln150_fu_379_p3),11));
    grp_fu_675_p1 <= ap_const_lv11_54(7 - 1 downto 0);
    grp_fu_675_p2 <= grp_fu_675_p20(7 - 1 downto 0);
    grp_fu_675_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_fu_517_p2),11));
    grp_fu_684_p2 <= (select_ln147_2_fu_607_p3 & ap_const_lv8_0);
    icmp_ln145_fu_230_p2 <= "1" when (indvar_flatten122_fu_126 = ap_const_lv17_19000) else "0";
    icmp_ln147_fu_242_p2 <= "1" when (indvar_flatten98_fu_118 = ap_const_lv14_1900) else "0";
    icmp_ln150_1_fu_407_p2 <= "1" when (select_ln150_fu_379_p3 = ap_const_lv5_F) else "0";
    icmp_ln150_fu_254_p2 <= "1" when (indvar_flatten83_fu_110 = ap_const_lv8_50) else "0";
    icmp_ln152_1_fu_401_p2 <= "1" when (add_ln152_fu_395_p2 = ap_const_lv3_5) else "0";
    icmp_ln152_fu_321_p2 <= "1" when (j_fu_102 = ap_const_lv3_5) else "0";
    or_ln147_1_fu_339_p2 <= (xor_ln147_fu_334_p2 or icmp_ln147_reg_753);
    or_ln147_fu_266_p2 <= (icmp_ln147_fu_242_p2 or and_ln145_1_fu_260_p2);
    or_ln148_1_fu_366_p2 <= (or_ln148_fu_361_p2 or icmp_ln147_reg_753);
    or_ln148_fu_361_p2 <= (and_ln147_fu_349_p2 or and_ln145_1_reg_771);
    p_shl21_fu_478_p3 <= (empty_fu_462_p1 & ap_const_lv4_0);
    p_shl22_fu_500_p3 <= (empty_161_reg_795_pp0_iter3_reg & ap_const_lv2_0);
    p_shl37_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_466_p3),11));
    p_shl38_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl21_fu_478_p3),11));
    p_shl39_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl22_fu_500_p3),11));
    p_shl_fu_466_p3 <= (empty_fu_462_p1 & ap_const_lv6_0);
    s_3_fu_625_p1 <= grp_fu_684_p3;
    s_3_fu_625_p4 <= s_3_fu_625_p1(23 downto 8);
    select_ln145_1_fu_442_p3 <= 
        add_ln145_1_fu_436_p2 when (icmp_ln147_reg_753_pp0_iter3_reg(0) = '1') else 
        n_fu_122;
    select_ln145_fu_429_p3 <= 
        ap_const_lv7_0 when (icmp_ln147_reg_753_pp0_iter3_reg(0) = '1') else 
        y_fu_114;
    select_ln147_1_fu_455_p3 <= 
        add_ln147_fu_449_p2 when (and_ln145_1_reg_771_pp0_iter3_reg(0) = '1') else 
        select_ln145_fu_429_p3;
    select_ln147_2_fu_607_p3 <= 
        ap_const_lv16_0 when (or_ln147_reg_777_pp0_iter7_reg(0) = '1') else 
        ap_sig_allocacmp_s_load;
    select_ln147_3_fu_292_p3 <= 
        ap_const_lv14_1 when (icmp_ln147_fu_242_p2(0) = '1') else 
        add_ln147_1_fu_286_p2;
    select_ln147_fu_327_p3 <= 
        ap_const_lv5_0 when (or_ln147_reg_777(0) = '1') else 
        k_fu_106;
    select_ln148_fu_371_p3 <= 
        ap_const_lv3_0 when (or_ln148_1_fu_366_p2(0) = '1') else 
        j_fu_102;
    select_ln150_1_fu_278_p3 <= 
        ap_const_lv8_1 when (or_ln147_fu_266_p2(0) = '1') else 
        add_ln150_1_fu_272_p2;
    select_ln150_fu_379_p3 <= 
        add_ln150_fu_355_p2 when (and_ln147_fu_349_p2(0) = '1') else 
        select_ln147_fu_327_p3;
        sext_ln155_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_3_fu_625_p4),17));

    tmp_fu_644_p3 <= add_ln155_fu_638_p2(16 downto 16);
    xor_ln145_fu_248_p2 <= (icmp_ln147_fu_242_p2 xor ap_const_lv1_1);
    xor_ln147_fu_334_p2 <= (icmp_ln150_reg_766 xor ap_const_lv1_1);
    zext_ln145_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln145_1_reg_808_pp0_iter6_reg),12));
    zext_ln147_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln147_1_fu_455_p3),11));
    zext_ln150_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln150_fu_379_p3),11));
    zext_ln152_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_reg_783_pp0_iter3_reg),7));
    zext_ln152_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_reg_783_pp0_iter3_reg),11));
    zext_ln153_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_675_p3),64));
    zext_ln153_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_2_fu_527_p2),12));
    zext_ln153_3_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_6_fu_542_p2),12));
    zext_ln153_4_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_3_reg_818),64));
    zext_ln155_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln155_1_reg_823_pp0_iter8_reg),64));
end behav;
