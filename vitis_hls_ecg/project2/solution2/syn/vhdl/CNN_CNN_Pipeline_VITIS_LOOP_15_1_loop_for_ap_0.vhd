-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_15_1_loop_for_ap_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce0 : OUT STD_LOGIC;
    OutPadConv0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce1 : OUT STD_LOGIC;
    OutPadConv0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv0_ce0 : OUT STD_LOGIC;
    OutConv0_we0 : OUT STD_LOGIC;
    OutConv0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_15_1_loop_for_ap_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln15_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_219 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln15_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_271_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_reg_700 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_reg_700_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_1_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_1_reg_708 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_1_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_297_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_713 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_713_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_713_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_159_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_159_reg_719 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_351_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_reg_739 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_3_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_5_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_4_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal p_cast149_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln17_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln23_3_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_4_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_6_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln23_7_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_8_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx3_sum_cast_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_88 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln23_1_fu_325_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_fu_92 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_sig_allocacmp_n_1_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln15_fu_253_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln17_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_2_fu_279_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_fu_301_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln15_1_fu_293_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_fu_368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln23_fu_362_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln23_3_fu_389_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_4_fu_400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_7_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_6_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_9_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_10_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_639_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln15_fu_503_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal arrayidx3_sum_fu_506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_517_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_648_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_517_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_534_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_657_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_534_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i13_i93_i_fu_551_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_566_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_fu_577_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_666_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal s_fu_577_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln25_fu_586_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i93_i_fu_551_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln25_fu_590_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln23_fu_573_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln25_3_fu_604_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_fu_609_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_562_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln25_1_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln25_2_fu_624_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_2_fu_624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_639_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U3 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => OutPadConv0_q1,
        din1 => Weights_q1,
        dout => mul_ln23_fu_362_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U4 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_219,
        din1 => Weights_q1,
        din2 => grp_fu_639_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_639_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U5 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_219,
        din1 => reg_224,
        din2 => grp_fu_648_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_648_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U6 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_load_3_reg_785,
        din1 => reg_224,
        din2 => grp_fu_657_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U7 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_load_4_reg_815,
        din1 => Weights_load_5_reg_810,
        din2 => grp_fu_666_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_666_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_247_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_96 <= add_ln15_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_247_p2 = ap_const_lv1_0))) then 
                    n_1_fu_92 <= select_ln15_1_fu_285_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_1_fu_92 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_219 <= OutPadConv0_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_219 <= OutPadConv0_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_224 <= Weights_q1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_224 <= Weights_q0;
            end if; 
        end if;
    end process;

    y_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_247_p2 = ap_const_lv1_0))) then 
                    y_fu_88 <= add_ln23_1_fu_325_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_88 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                OutPadConv0_load_3_reg_785 <= OutPadConv0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                OutPadConv0_load_4_reg_815 <= OutPadConv0_q0;
                Weights_load_5_reg_810 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_159_reg_719 <= empty_159_fu_309_p2;
                empty_reg_713 <= empty_fu_297_p1;
                empty_reg_713_pp0_iter1_reg <= empty_reg_713;
                empty_reg_713_pp0_iter2_reg <= empty_reg_713_pp0_iter1_reg;
                icmp_ln15_reg_696 <= icmp_ln15_fu_247_p2;
                select_ln15_1_reg_708 <= select_ln15_1_fu_285_p3;
                select_ln15_1_reg_708_pp0_iter1_reg <= select_ln15_1_reg_708;
                select_ln15_reg_700 <= select_ln15_fu_271_p3;
                select_ln15_reg_700_pp0_iter1_reg <= select_ln15_reg_700;
                select_ln15_reg_700_pp0_iter2_reg <= select_ln15_reg_700_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    p_cast_reg_739(3 downto 0) <= p_cast_fu_351_p1(3 downto 0);
                tmp_9_reg_750 <= mul_ln23_fu_362_p2(23 downto 8);
            end if;
        end if;
    end process;
    p_cast_reg_739(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    OutConv0_address0 <= zext_ln25_1_fu_619_p1(11 - 1 downto 0);

    OutConv0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            OutConv0_ce0 <= ap_const_logic_1;
        else 
            OutConv0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv0_d0 <= 
        ap_const_lv16_0 when (tmp_fu_596_p3(0) = '1') else 
        add_ln25_2_fu_624_p2;

    OutConv0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            OutConv0_we0 <= ap_const_logic_1;
        else 
            OutConv0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln23_2_fu_331_p1, ap_block_pp0_stage1, zext_ln23_6_fu_415_p1, ap_block_pp0_stage2, zext_ln23_8_fu_453_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv0_address0 <= zext_ln23_8_fu_453_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv0_address0 <= zext_ln23_6_fu_415_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv0_address0 <= zext_ln23_2_fu_331_p1(9 - 1 downto 0);
            else 
                OutPadConv0_address0 <= "XXXXXXXXX";
            end if;
        else 
            OutPadConv0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    OutPadConv0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln17_fu_320_p1, ap_block_pp0_stage1, zext_ln23_4_fu_405_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv0_address1 <= zext_ln23_4_fu_405_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv0_address1 <= zext_ln17_fu_320_p1(9 - 1 downto 0);
            else 
                OutPadConv0_address1 <= "XXXXXXXXX";
            end if;
        else 
            OutPadConv0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    OutPadConv0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv0_ce0 <= ap_const_logic_1;
        else 
            OutPadConv0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv0_ce1 <= ap_const_logic_1;
        else 
            OutPadConv0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln23_3_fu_395_p1, ap_block_pp0_stage2, zext_ln23_7_fu_443_p1, arrayidx3_sum_cast_fu_512_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0 <= arrayidx3_sum_cast_fu_512_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0 <= zext_ln23_7_fu_443_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0 <= zext_ln23_3_fu_395_p1(14 - 1 downto 0);
        else 
            Weights_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, p_cast149_fu_315_p1, ap_block_pp0_stage0, zext_ln23_1_fu_374_p1, ap_block_pp0_stage1, zext_ln23_5_fu_433_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address1 <= zext_ln23_5_fu_433_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address1 <= zext_ln23_1_fu_374_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Weights_address1 <= p_cast149_fu_315_p1(14 - 1 downto 0);
            else 
                Weights_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_2_fu_279_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1_load) + unsigned(ap_const_lv3_1));
    add_ln15_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln23_10_fu_448_p2 <= std_logic_vector(unsigned(select_ln15_reg_700) + unsigned(ap_const_lv9_4));
    add_ln23_1_fu_325_p2 <= std_logic_vector(unsigned(select_ln15_fu_271_p3) + unsigned(ap_const_lv9_1));
    add_ln23_3_fu_389_p2 <= std_logic_vector(unsigned(p_cast_fu_351_p1) + unsigned(ap_const_lv5_2));
    add_ln23_4_fu_400_p2 <= std_logic_vector(unsigned(select_ln15_reg_700) + unsigned(ap_const_lv9_2));
    add_ln23_6_fu_428_p2 <= std_logic_vector(unsigned(p_cast_reg_739) + unsigned(ap_const_lv5_3));
    add_ln23_7_fu_410_p2 <= std_logic_vector(unsigned(select_ln15_reg_700) + unsigned(ap_const_lv9_3));
    add_ln23_9_fu_438_p2 <= std_logic_vector(unsigned(p_cast_reg_739) + unsigned(ap_const_lv5_4));
    add_ln23_fu_368_p2 <= std_logic_vector(unsigned(p_cast_fu_351_p1) + unsigned(ap_const_lv5_1));
    add_ln25_1_fu_613_p2 <= std_logic_vector(unsigned(zext_ln25_fu_609_p1) + unsigned(p_shl_cast_fu_562_p1));
    add_ln25_2_fu_624_p0 <= reg_224;
    add_ln25_2_fu_624_p2 <= std_logic_vector(signed(add_ln25_2_fu_624_p0) + signed(s_fu_577_p4));
    add_ln25_3_fu_604_p2 <= std_logic_vector(unsigned(zext_ln23_fu_573_p1) + unsigned(select_ln15_reg_700_pp0_iter2_reg));
    add_ln25_fu_590_p2 <= std_logic_vector(signed(sext_ln25_fu_586_p1) + signed(conv_i_i13_i93_i_fu_551_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln15_reg_696)
    begin
        if (((icmp_ln15_reg_696 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_1_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_1_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_n_1_load <= n_1_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_88;
        end if; 
    end process;

    arrayidx3_sum_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx3_sum_fu_506_p2),64));
    arrayidx3_sum_fu_506_p2 <= std_logic_vector(unsigned(zext_ln15_fu_503_p1) + unsigned(ap_const_lv5_14));
    conv_i_i13_i93_i_fu_551_p0 <= reg_224;
        conv_i_i13_i93_i_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i13_i93_i_fu_551_p0),17));

    empty_159_fu_309_p2 <= std_logic_vector(unsigned(p_shl2_fu_301_p3) + unsigned(zext_ln15_1_fu_293_p1));
    empty_fu_297_p1 <= select_ln15_1_fu_285_p3(2 - 1 downto 0);
    grp_fu_639_p2 <= (tmp_9_reg_750 & ap_const_lv8_0);
    grp_fu_648_p2 <= (tmp_10_fu_480_p4 & ap_const_lv8_0);
    grp_fu_657_p2 <= (tmp_11_fu_517_p4 & ap_const_lv8_0);
    grp_fu_666_p2 <= (tmp_12_fu_534_p4 & ap_const_lv8_0);
    icmp_ln15_fu_247_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_500) else "0";
    icmp_ln17_fu_265_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv9_140) else "0";
    p_cast149_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_159_fu_309_p2),64));
    p_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_159_reg_719),5));
    p_shl1_fu_566_p3 <= (empty_reg_713_pp0_iter2_reg & ap_const_lv6_0);
    p_shl2_fu_301_p3 <= (empty_fu_297_p1 & ap_const_lv2_0);
    p_shl_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_555_p3),11));
    p_shl_fu_555_p3 <= (empty_reg_713_pp0_iter2_reg & ap_const_lv8_0);
    s_fu_577_p1 <= grp_fu_666_p3;
    s_fu_577_p4 <= s_fu_577_p1(23 downto 8);
    select_ln15_1_fu_285_p3 <= 
        add_ln15_2_fu_279_p2 when (icmp_ln17_fu_265_p2(0) = '1') else 
        ap_sig_allocacmp_n_1_load;
    select_ln15_fu_271_p3 <= 
        ap_const_lv9_0 when (icmp_ln17_fu_265_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
        sext_ln25_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_fu_577_p4),17));

    tmp_10_fu_480_p1 <= grp_fu_639_p3;
    tmp_10_fu_480_p4 <= tmp_10_fu_480_p1(23 downto 8);
    tmp_11_fu_517_p1 <= grp_fu_648_p3;
    tmp_11_fu_517_p4 <= tmp_11_fu_517_p1(23 downto 8);
    tmp_12_fu_534_p1 <= grp_fu_657_p3;
    tmp_12_fu_534_p4 <= tmp_12_fu_534_p1(23 downto 8);
    tmp_fu_596_p3 <= add_ln25_fu_590_p2(16 downto 16);
    zext_ln15_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_1_fu_285_p3),4));
    zext_ln15_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_1_reg_708_pp0_iter1_reg),5));
    zext_ln17_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_fu_271_p3),64));
    zext_ln23_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_368_p2),64));
    zext_ln23_2_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_325_p2),64));
    zext_ln23_3_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_389_p2),64));
    zext_ln23_4_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_400_p2),64));
    zext_ln23_5_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_6_fu_428_p2),64));
    zext_ln23_6_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_7_fu_410_p2),64));
    zext_ln23_7_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_9_fu_438_p2),64));
    zext_ln23_8_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_10_fu_448_p2),64));
    zext_ln23_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_566_p3),9));
    zext_ln25_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_fu_613_p2),64));
    zext_ln25_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_3_fu_604_p2),11));
end behav;
