-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_171_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPadConv6_ce0 : OUT STD_LOGIC;
    OutPadConv6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv6_ce0 : OUT STD_LOGIC;
    OutConv6_we0 : OUT STD_LOGIC;
    OutConv6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_171_1_loop_for_ap_6_loop_for_fc_6_loop_for_fa_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_19000 : STD_LOGIC_VECTOR (16 downto 0) := "11001000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv13_C80 : STD_LOGIC_VECTOR (12 downto 0) := "0110010000000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_9FC : STD_LOGIC_VECTOR (11 downto 0) := "100111111100";
    constant ap_const_lv13_13FC : STD_LOGIC_VECTOR (12 downto 0) := "1001111111100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_2C : STD_LOGIC_VECTOR (9 downto 0) := "0000101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln171_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln173_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln173_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln171_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_1_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_1_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_1_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_1_reg_807_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_reg_813_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln174_fu_373_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln174_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln174_reg_819_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln174_reg_819_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln176_fu_381_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln176_reg_825 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln176_reg_825_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln176_reg_825_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_158_fu_393_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_158_reg_835 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_158_reg_835_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_158_reg_835_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln178_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_1_reg_840_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_1_reg_844_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln171_1_fu_444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_1_reg_848 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_1_reg_848_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_1_reg_848_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln173_1_fu_457_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln173_1_reg_853 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln173_1_reg_853_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln173_1_reg_853_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_464_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_858_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_858_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln181_1_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln181_1_reg_896 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln181_1_reg_896_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Weights_load_reg_901 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln179_5_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln179_1_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx45_sum_cast_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_1_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_fu_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal s_2_fu_661_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_s_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln178_fu_397_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_108 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal indvar_flatten143_fu_112 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln176_1_fu_280_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_116 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten158_fu_120 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal select_ln173_3_fu_294_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal n_fu_124 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten182_fu_128 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln171_fu_238_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln176_1_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln173_1_fu_288_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln173_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln171_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln173_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln173_fu_329_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln173_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln174_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln174_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln176_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln171_1_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln171_fu_431_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln173_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln178_2_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln179_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_491_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl20_fu_512_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_711_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl17_fu_502_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln176_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln179_2_fu_530_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln179_2_fu_536_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl48_cast_fu_498_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln179_5_fu_540_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln178_1_fu_523_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln179_6_fu_550_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl50_cast_fu_519_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln179_7_fu_556_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln179_4_fu_562_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln179_3_fu_546_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln179_3_fu_566_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln171_fu_585_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal arrayidx45_sum_fu_588_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl18_fu_599_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl19_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln173_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln173_1_fu_621_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln181_3_fu_624_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln181_fu_630_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl46_cast_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln173_2_fu_643_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_2_fu_661_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_720_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln181_fu_670_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i93_i382_fu_658_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln181_fu_674_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_680_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln181_2_fu_692_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_711_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_711_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_720_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_711_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_711_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_5ns_6ns_6ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_5ns_6ns_6ns_10_4_1_U180 : component CNN_mac_muladd_5ns_6ns_6ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_711_p0,
        din1 => grp_fu_711_p1,
        din2 => grp_fu_711_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_711_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U181 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv6_q0,
        din1 => Weights_q1,
        din2 => grp_fu_720_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_720_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten143_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten143_fu_112 <= ap_const_lv8_0;
                elsif (((icmp_ln171_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten143_fu_112 <= select_ln176_1_fu_280_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten158_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten158_fu_120 <= ap_const_lv13_0;
                elsif (((icmp_ln171_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten158_fu_120 <= select_ln173_3_fu_294_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten182_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten182_fu_128 <= ap_const_lv17_0;
                elsif (((icmp_ln171_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten182_fu_128 <= add_ln171_fu_238_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_104 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_104 <= add_ln178_fu_397_p2;
                end if;
            end if; 
        end if;
    end process;

    k_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    k_fu_108 <= ap_const_lv5_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_108 <= select_ln176_fu_381_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    n_fu_124 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    n_fu_124 <= select_ln171_1_fu_444_p3;
                end if;
            end if; 
        end if;
    end process;

    s_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    s_fu_100 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    s_fu_100 <= s_2_fu_661_p1(23 downto 8);
                end if;
            end if; 
        end if;
    end process;

    y_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_116 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    y_fu_116 <= select_ln173_1_fu_457_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                Weights_load_reg_901 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln181_1_reg_896 <= add_ln181_1_fu_634_p2;
                add_ln181_1_reg_896_pp0_iter8_reg <= add_ln181_1_reg_896;
                and_ln171_1_reg_807_pp0_iter2_reg <= and_ln171_1_reg_807;
                and_ln171_1_reg_807_pp0_iter3_reg <= and_ln171_1_reg_807_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                empty_158_reg_835 <= empty_158_fu_393_p1;
                empty_158_reg_835_pp0_iter3_reg <= empty_158_reg_835;
                empty_158_reg_835_pp0_iter4_reg <= empty_158_reg_835_pp0_iter3_reg;
                empty_reg_858 <= empty_fu_464_p1;
                empty_reg_858_pp0_iter5_reg <= empty_reg_858;
                empty_reg_858_pp0_iter6_reg <= empty_reg_858_pp0_iter5_reg;
                icmp_ln173_reg_789_pp0_iter2_reg <= icmp_ln173_reg_789;
                icmp_ln173_reg_789_pp0_iter3_reg <= icmp_ln173_reg_789_pp0_iter2_reg;
                icmp_ln176_1_reg_844 <= icmp_ln176_1_fu_409_p2;
                icmp_ln176_1_reg_844_pp0_iter3_reg <= icmp_ln176_1_reg_844;
                icmp_ln176_1_reg_844_pp0_iter4_reg <= icmp_ln176_1_reg_844_pp0_iter3_reg;
                icmp_ln176_1_reg_844_pp0_iter5_reg <= icmp_ln176_1_reg_844_pp0_iter4_reg;
                icmp_ln176_1_reg_844_pp0_iter6_reg <= icmp_ln176_1_reg_844_pp0_iter5_reg;
                icmp_ln176_1_reg_844_pp0_iter7_reg <= icmp_ln176_1_reg_844_pp0_iter6_reg;
                icmp_ln176_1_reg_844_pp0_iter8_reg <= icmp_ln176_1_reg_844_pp0_iter7_reg;
                icmp_ln178_1_reg_840 <= icmp_ln178_1_fu_403_p2;
                icmp_ln178_1_reg_840_pp0_iter3_reg <= icmp_ln178_1_reg_840;
                icmp_ln178_1_reg_840_pp0_iter4_reg <= icmp_ln178_1_reg_840_pp0_iter3_reg;
                icmp_ln178_1_reg_840_pp0_iter5_reg <= icmp_ln178_1_reg_840_pp0_iter4_reg;
                icmp_ln178_1_reg_840_pp0_iter6_reg <= icmp_ln178_1_reg_840_pp0_iter5_reg;
                icmp_ln178_1_reg_840_pp0_iter7_reg <= icmp_ln178_1_reg_840_pp0_iter6_reg;
                icmp_ln178_1_reg_840_pp0_iter8_reg <= icmp_ln178_1_reg_840_pp0_iter7_reg;
                or_ln173_reg_813_pp0_iter2_reg <= or_ln173_reg_813;
                or_ln173_reg_813_pp0_iter3_reg <= or_ln173_reg_813_pp0_iter2_reg;
                or_ln173_reg_813_pp0_iter4_reg <= or_ln173_reg_813_pp0_iter3_reg;
                or_ln173_reg_813_pp0_iter5_reg <= or_ln173_reg_813_pp0_iter4_reg;
                or_ln173_reg_813_pp0_iter6_reg <= or_ln173_reg_813_pp0_iter5_reg;
                or_ln173_reg_813_pp0_iter7_reg <= or_ln173_reg_813_pp0_iter6_reg;
                select_ln171_1_reg_848 <= select_ln171_1_fu_444_p3;
                select_ln171_1_reg_848_pp0_iter5_reg <= select_ln171_1_reg_848;
                select_ln171_1_reg_848_pp0_iter6_reg <= select_ln171_1_reg_848_pp0_iter5_reg;
                select_ln173_1_reg_853 <= select_ln173_1_fu_457_p3;
                select_ln173_1_reg_853_pp0_iter5_reg <= select_ln173_1_reg_853;
                select_ln173_1_reg_853_pp0_iter6_reg <= select_ln173_1_reg_853_pp0_iter5_reg;
                select_ln174_reg_819 <= select_ln174_fu_373_p3;
                select_ln174_reg_819_pp0_iter3_reg <= select_ln174_reg_819;
                select_ln174_reg_819_pp0_iter4_reg <= select_ln174_reg_819_pp0_iter3_reg;
                select_ln176_reg_825 <= select_ln176_fu_381_p3;
                select_ln176_reg_825_pp0_iter3_reg <= select_ln176_reg_825;
                select_ln176_reg_825_pp0_iter4_reg <= select_ln176_reg_825_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln171_1_reg_807 <= and_ln171_1_fu_262_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln173_reg_789 <= icmp_ln173_fu_244_p2;
                icmp_ln176_reg_802 <= icmp_ln176_fu_256_p2;
                or_ln173_reg_813 <= or_ln173_fu_268_p2;
                xor_ln171_reg_797 <= xor_ln171_fu_250_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv6_address0 <= zext_ln181_1_fu_688_p1(11 - 1 downto 0);

    OutConv6_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            OutConv6_ce0 <= ap_const_logic_1;
        else 
            OutConv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv6_d0 <= 
        ap_const_lv16_0 when (tmp_fu_680_p3(0) = '1') else 
        add_ln181_2_fu_692_p2;

    OutConv6_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, icmp_ln178_1_reg_840_pp0_iter8_reg, icmp_ln176_1_reg_844_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln176_1_reg_844_pp0_iter8_reg = ap_const_lv1_1) and (icmp_ln178_1_reg_840_pp0_iter8_reg = ap_const_lv1_1))) then 
            OutConv6_we0 <= ap_const_logic_1;
        else 
            OutConv6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv6_address0 <= zext_ln179_1_fu_526_p1(10 - 1 downto 0);

    OutPadConv6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            OutPadConv6_ce0 <= ap_const_logic_1;
        else 
            OutPadConv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= arrayidx45_sum_cast_fu_594_p1(14 - 1 downto 0);
    Weights_address1 <= zext_ln179_5_fu_572_p1(14 - 1 downto 0);

    Weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln171_1_fu_438_p2 <= std_logic_vector(unsigned(n_fu_124) + unsigned(ap_const_lv6_1));
    add_ln171_fu_238_p2 <= std_logic_vector(unsigned(indvar_flatten182_fu_128) + unsigned(ap_const_lv17_1));
    add_ln173_1_fu_288_p2 <= std_logic_vector(unsigned(indvar_flatten158_fu_120) + unsigned(ap_const_lv13_1));
    add_ln173_fu_451_p2 <= std_logic_vector(unsigned(select_ln171_fu_431_p3) + unsigned(ap_const_lv6_1));
    add_ln176_1_fu_274_p2 <= std_logic_vector(unsigned(indvar_flatten143_fu_112) + unsigned(ap_const_lv8_1));
    add_ln176_fu_357_p2 <= std_logic_vector(unsigned(select_ln173_fu_329_p3) + unsigned(ap_const_lv5_1));
    add_ln178_fu_397_p2 <= std_logic_vector(unsigned(select_ln174_fu_373_p3) + unsigned(ap_const_lv3_1));
    add_ln179_2_fu_530_p2 <= std_logic_vector(unsigned(p_shl17_fu_502_p3) + unsigned(zext_ln176_fu_509_p1));
    add_ln179_3_fu_566_p2 <= std_logic_vector(unsigned(zext_ln179_4_fu_562_p1) + unsigned(zext_ln179_3_fu_546_p1));
    add_ln179_5_fu_540_p2 <= std_logic_vector(unsigned(zext_ln179_2_fu_536_p1) + unsigned(p_shl48_cast_fu_498_p1));
    add_ln179_6_fu_550_p2 <= std_logic_vector(unsigned(zext_ln178_1_fu_523_p1) + unsigned(ap_const_lv12_9FC));
    add_ln179_7_fu_556_p2 <= std_logic_vector(unsigned(add_ln179_6_fu_550_p2) + unsigned(p_shl50_cast_fu_519_p1));
    add_ln179_fu_471_p2 <= std_logic_vector(unsigned(select_ln173_1_fu_457_p3) + unsigned(zext_ln178_2_fu_468_p1));
    add_ln181_1_fu_634_p2 <= std_logic_vector(unsigned(zext_ln181_fu_630_p1) + unsigned(p_shl46_cast_fu_606_p1));
    add_ln181_2_fu_692_p2 <= std_logic_vector(signed(Weights_load_reg_901) + signed(s_2_fu_661_p4));
    add_ln181_3_fu_624_p2 <= std_logic_vector(unsigned(zext_ln173_fu_617_p1) + unsigned(zext_ln173_1_fu_621_p1));
    add_ln181_fu_674_p2 <= std_logic_vector(signed(sext_ln181_fu_670_p1) + signed(conv_i_i13_i93_i382_fu_658_p1));
    and_ln171_1_fu_262_p2 <= (xor_ln171_fu_250_p2 and icmp_ln176_fu_256_p2);
    and_ln171_fu_346_p2 <= (xor_ln171_reg_797 and icmp_ln178_fu_323_p2);
    and_ln173_fu_351_p2 <= (or_ln173_1_fu_341_p2 and and_ln171_fu_346_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln171_fu_232_p2)
    begin
        if (((icmp_ln171_fu_232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, s_fu_100, s_2_fu_661_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ap_sig_allocacmp_s_load <= s_2_fu_661_p1(23 downto 8);
        else 
            ap_sig_allocacmp_s_load <= s_fu_100;
        end if; 
    end process;

    arrayidx45_sum_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx45_sum_fu_588_p2),64));
    arrayidx45_sum_fu_588_p2 <= std_logic_vector(unsigned(zext_ln171_fu_585_p1) + unsigned(ap_const_lv13_13FC));
        conv_i_i13_i93_i382_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Weights_load_reg_901),17));

    empty_158_fu_393_p1 <= select_ln176_fu_381_p3(4 - 1 downto 0);
    empty_fu_464_p1 <= select_ln171_1_fu_444_p3(5 - 1 downto 0);
    grp_fu_711_p0 <= grp_fu_711_p00(5 - 1 downto 0);
    grp_fu_711_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln176_fu_381_p3),10));
    grp_fu_711_p1 <= ap_const_lv10_2C(6 - 1 downto 0);
    grp_fu_711_p2 <= grp_fu_711_p20(6 - 1 downto 0);
    grp_fu_711_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_fu_471_p2),10));
    grp_fu_720_p2 <= (select_ln173_2_fu_643_p3 & ap_const_lv8_0);
    icmp_ln171_fu_232_p2 <= "1" when (indvar_flatten182_fu_128 = ap_const_lv17_19000) else "0";
    icmp_ln173_fu_244_p2 <= "1" when (indvar_flatten158_fu_120 = ap_const_lv13_C80) else "0";
    icmp_ln176_1_fu_409_p2 <= "1" when (select_ln176_fu_381_p3 = ap_const_lv5_F) else "0";
    icmp_ln176_fu_256_p2 <= "1" when (indvar_flatten143_fu_112 = ap_const_lv8_50) else "0";
    icmp_ln178_1_fu_403_p2 <= "1" when (add_ln178_fu_397_p2 = ap_const_lv3_5) else "0";
    icmp_ln178_fu_323_p2 <= "1" when (j_fu_104 = ap_const_lv3_5) else "0";
    or_ln173_1_fu_341_p2 <= (xor_ln173_fu_336_p2 or icmp_ln173_reg_789);
    or_ln173_fu_268_p2 <= (icmp_ln173_fu_244_p2 or and_ln171_1_fu_262_p2);
    or_ln174_1_fu_368_p2 <= (or_ln174_fu_363_p2 or icmp_ln173_reg_789);
    or_ln174_fu_363_p2 <= (and_ln173_fu_351_p2 or and_ln171_1_reg_807);
    p_shl17_fu_502_p3 <= (empty_reg_858 & ap_const_lv4_0);
    p_shl18_fu_599_p3 <= (empty_reg_858_pp0_iter6_reg & ap_const_lv5_0);
    p_shl19_fu_610_p3 <= (empty_reg_858_pp0_iter6_reg & ap_const_lv3_0);
    p_shl20_fu_512_p3 <= (empty_158_reg_835_pp0_iter4_reg & ap_const_lv2_0);
    p_shl46_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_fu_599_p3),11));
    p_shl48_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_491_p3),12));
    p_shl50_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_fu_512_p3),12));
    p_shl_fu_491_p3 <= (empty_reg_858 & ap_const_lv6_0);
    s_2_fu_661_p1 <= grp_fu_720_p3;
    s_2_fu_661_p4 <= s_2_fu_661_p1(23 downto 8);
    select_ln171_1_fu_444_p3 <= 
        add_ln171_1_fu_438_p2 when (icmp_ln173_reg_789_pp0_iter3_reg(0) = '1') else 
        n_fu_124;
    select_ln171_fu_431_p3 <= 
        ap_const_lv6_0 when (icmp_ln173_reg_789_pp0_iter3_reg(0) = '1') else 
        y_fu_116;
    select_ln173_1_fu_457_p3 <= 
        add_ln173_fu_451_p2 when (and_ln171_1_reg_807_pp0_iter3_reg(0) = '1') else 
        select_ln171_fu_431_p3;
    select_ln173_2_fu_643_p3 <= 
        ap_const_lv16_0 when (or_ln173_reg_813_pp0_iter7_reg(0) = '1') else 
        ap_sig_allocacmp_s_load;
    select_ln173_3_fu_294_p3 <= 
        ap_const_lv13_1 when (icmp_ln173_fu_244_p2(0) = '1') else 
        add_ln173_1_fu_288_p2;
    select_ln173_fu_329_p3 <= 
        ap_const_lv5_0 when (or_ln173_reg_813(0) = '1') else 
        k_fu_108;
    select_ln174_fu_373_p3 <= 
        ap_const_lv3_0 when (or_ln174_1_fu_368_p2(0) = '1') else 
        j_fu_104;
    select_ln176_1_fu_280_p3 <= 
        ap_const_lv8_1 when (or_ln173_fu_268_p2(0) = '1') else 
        add_ln176_1_fu_274_p2;
    select_ln176_fu_381_p3 <= 
        add_ln176_fu_357_p2 when (and_ln173_fu_351_p2(0) = '1') else 
        select_ln173_fu_329_p3;
        sext_ln181_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_2_fu_661_p4),17));

    tmp_fu_680_p3 <= add_ln181_fu_674_p2(16 downto 16);
    xor_ln171_fu_250_p2 <= (icmp_ln173_fu_244_p2 xor ap_const_lv1_1);
    xor_ln173_fu_336_p2 <= (icmp_ln176_reg_802 xor ap_const_lv1_1);
    zext_ln171_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln171_1_reg_848_pp0_iter6_reg),13));
    zext_ln173_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln173_1_reg_853_pp0_iter6_reg),9));
    zext_ln173_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_fu_610_p3),9));
    zext_ln176_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln176_reg_825_pp0_iter4_reg),9));
    zext_ln178_1_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln174_reg_819_pp0_iter4_reg),12));
    zext_ln178_2_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln174_reg_819_pp0_iter3_reg),6));
    zext_ln179_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_711_p3),64));
    zext_ln179_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_2_fu_530_p2),12));
    zext_ln179_3_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_5_fu_540_p2),13));
    zext_ln179_4_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_7_fu_556_p2),13));
    zext_ln179_5_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln179_3_fu_566_p2),64));
    zext_ln181_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_1_reg_896_pp0_iter8_reg),64));
    zext_ln181_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_3_fu_624_p2),11));
end behav;
