-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_67_1_loop_for_ap_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPadConv2_ce0 : OUT STD_LOGIC;
    OutPadConv2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPadConv2_ce1 : OUT STD_LOGIC;
    OutPadConv2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv2_ce0 : OUT STD_LOGIC;
    OutConv2_we0 : OUT STD_LOGIC;
    OutConv2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_67_1_loop_for_ap_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_6C : STD_LOGIC_VECTOR (7 downto 0) := "01101100";
    constant ap_const_lv8_6D : STD_LOGIC_VECTOR (7 downto 0) := "01101101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_6E : STD_LOGIC_VECTOR (7 downto 0) := "01101110";
    constant ap_const_lv8_6F : STD_LOGIC_VECTOR (7 downto 0) := "01101111";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_A4 : STD_LOGIC_VECTOR (8 downto 0) := "010100100";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_71 : STD_LOGIC_VECTOR (7 downto 0) := "01110001";
    constant ap_const_lv9_A5 : STD_LOGIC_VECTOR (8 downto 0) := "010100101";
    constant ap_const_lv9_A6 : STD_LOGIC_VECTOR (8 downto 0) := "010100110";
    constant ap_const_lv8_72 : STD_LOGIC_VECTOR (7 downto 0) := "01110010";
    constant ap_const_lv8_73 : STD_LOGIC_VECTOR (7 downto 0) := "01110011";
    constant ap_const_lv9_A7 : STD_LOGIC_VECTOR (8 downto 0) := "010100111";
    constant ap_const_lv9_A8 : STD_LOGIC_VECTOR (8 downto 0) := "010101000";
    constant ap_const_lv9_74 : STD_LOGIC_VECTOR (8 downto 0) := "001110100";
    constant ap_const_lv9_75 : STD_LOGIC_VECTOR (8 downto 0) := "001110101";
    constant ap_const_lv9_148 : STD_LOGIC_VECTOR (8 downto 0) := "101001000";
    constant ap_const_lv9_149 : STD_LOGIC_VECTOR (8 downto 0) := "101001001";
    constant ap_const_lv9_76 : STD_LOGIC_VECTOR (8 downto 0) := "001110110";
    constant ap_const_lv9_77 : STD_LOGIC_VECTOR (8 downto 0) := "001110111";
    constant ap_const_lv9_14A : STD_LOGIC_VECTOR (8 downto 0) := "101001010";
    constant ap_const_lv9_14B : STD_LOGIC_VECTOR (8 downto 0) := "101001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_78 : STD_LOGIC_VECTOR (8 downto 0) := "001111000";
    constant ap_const_lv9_79 : STD_LOGIC_VECTOR (8 downto 0) := "001111001";
    constant ap_const_lv9_14C : STD_LOGIC_VECTOR (8 downto 0) := "101001100";
    constant ap_const_lv10_1EC : STD_LOGIC_VECTOR (9 downto 0) := "0111101100";
    constant ap_const_lv9_7A : STD_LOGIC_VECTOR (8 downto 0) := "001111010";
    constant ap_const_lv9_7B : STD_LOGIC_VECTOR (8 downto 0) := "001111011";
    constant ap_const_lv10_1ED : STD_LOGIC_VECTOR (9 downto 0) := "0111101101";
    constant ap_const_lv10_1EE : STD_LOGIC_VECTOR (9 downto 0) := "0111101110";
    constant ap_const_lv9_7C : STD_LOGIC_VECTOR (8 downto 0) := "001111100";
    constant ap_const_lv9_7D : STD_LOGIC_VECTOR (8 downto 0) := "001111101";
    constant ap_const_lv10_1EF : STD_LOGIC_VECTOR (9 downto 0) := "0111101111";
    constant ap_const_lv10_1F0 : STD_LOGIC_VECTOR (9 downto 0) := "0111110000";
    constant ap_const_lv9_7E : STD_LOGIC_VECTOR (8 downto 0) := "001111110";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv9_10C : STD_LOGIC_VECTOR (8 downto 0) := "100001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal icmp_ln67_reg_1848 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_557 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal icmp_ln67_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln67_reg_1848_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal n_load_reg_1852 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln69_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1857 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_604_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln67_reg_1862 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln67_1_fu_612_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln67_1_reg_1871 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln67_1_fu_644_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln67_1_reg_1886 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_649_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_reg_1891 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_156_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_156_reg_1897 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln69_3_fu_730_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln69_3_reg_1928 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_reg_1952 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast86_fu_909_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_cast86_reg_2042 : STD_LOGIC_VECTOR (8 downto 0);
    signal OutPadConv2_load_9_reg_2081 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_11_reg_2121 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln69_2_fu_1066_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln69_2_reg_2136 : STD_LOGIC_VECTOR (9 downto 0);
    signal Weights_load_39_reg_2159 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_12_reg_2169 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_13_reg_2179 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln77_1_fu_1144_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_1_reg_2194 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln77_1_reg_2194_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Weights_load_41_reg_2214 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_15_reg_2229 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_43_reg_2259 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_16_reg_2269 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_17_reg_2279 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_45_reg_2309 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_18_reg_2319 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_load_19_reg_2329 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_46_reg_2354 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_47_reg_2359 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_27_reg_2364 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln69_1_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln75_1_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln75_2_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_3_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_5_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_4_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln75_6_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_7_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_9_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_8_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln75_10_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_11_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_13_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_12_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln75_14_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_15_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_17_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_16_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln75_18_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_19_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_21_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_20_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln75_22_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_23_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_25_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_24_fu_1099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln75_26_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_27_fu_1119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_29_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_28_fu_1180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln75_30_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_31_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_33_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_32_fu_1245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln75_34_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_35_fu_1265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_37_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_36_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln75_38_fu_1319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx17_sum_cast_fu_1333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_1638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_152 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln75_1_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (7 downto 0);
    signal n_fu_156 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten34_fu_160 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln67_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten34_load : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_fu_653_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_fu_665_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_cast_fu_661_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl18_cast_fu_673_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_2_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_4_fu_705_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_7_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln75_fu_741_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln75_5_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_8_fu_775_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_10_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_13_fu_795_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_11_fu_814_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_14_fu_824_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_16_fu_834_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_19_fu_844_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_17_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_20_fu_879_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_22_fu_889_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_25_fu_899_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_46_fu_912_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1656_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_46_fu_912_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_23_fu_937_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_26_fu_948_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_28_fu_959_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_31_fu_969_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_47_fu_979_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1665_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_47_fu_979_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_29_fu_1004_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_32_fu_1014_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_34_fu_1024_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_37_fu_1034_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl8_fu_1044_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl10_fu_1055_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_fu_1069_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1674_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_48_fu_1069_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_35_fu_1094_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_38_fu_1104_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_40_fu_1114_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_43_fu_1124_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln69_fu_1062_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_3_fu_1135_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln77_fu_1140_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl15_cast_fu_1051_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_1150_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1683_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_49_fu_1150_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_41_fu_1175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_44_fu_1185_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_46_fu_1195_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_49_fu_1205_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_1215_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1692_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_50_fu_1215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_47_fu_1240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_50_fu_1250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_52_fu_1260_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_55_fu_1270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_51_fu_1280_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1701_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_51_fu_1280_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln75_53_fu_1304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln75_56_fu_1314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_fu_1324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx17_sum_fu_1327_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_52_fu_1338_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1710_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_52_fu_1338_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_1363_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1719_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_53_fu_1363_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_1386_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1728_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_54_fu_1386_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_1410_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1737_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_55_fu_1410_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_1433_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1746_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_56_fu_1433_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_1458_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1755_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_57_fu_1458_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_1481_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1764_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_58_fu_1481_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_1505_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1773_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_59_fu_1505_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_1528_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1782_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_1528_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_1551_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1791_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_61_fu_1551_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_1574_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1800_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_62_fu_1574_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_1591_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1809_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_63_fu_1591_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_fu_1611_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1818_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal s_fu_1611_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln77_fu_1620_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i93_i81_fu_1608_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln77_fu_1624_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_1630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln77_2_fu_1642_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1656_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1665_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1674_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1683_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1692_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1701_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1710_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1719_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1728_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1737_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1746_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1755_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1764_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1773_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1782_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1791_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1800_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1809_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1818_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U46 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => reg_523,
        din1 => Weights_q1,
        dout => mul_ln75_fu_741_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U47 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_527,
        din1 => Weights_q0,
        din2 => grp_fu_1656_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1656_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U48 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_523,
        din1 => Weights_q0,
        din2 => grp_fu_1665_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1665_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U49 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_527,
        din1 => reg_532,
        din2 => grp_fu_1674_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1674_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U50 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_523,
        din1 => reg_532,
        din2 => grp_fu_1683_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1683_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U51 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_537,
        din1 => reg_542,
        din2 => grp_fu_1692_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1692_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U52 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_527,
        din1 => reg_532,
        din2 => grp_fu_1701_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1701_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U53 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_547,
        din1 => reg_552,
        din2 => grp_fu_1710_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1710_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U54 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_523,
        din1 => reg_542,
        din2 => grp_fu_1719_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1719_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U55 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_9_reg_2081,
        din1 => reg_557,
        din2 => grp_fu_1728_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1728_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U56 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_537,
        din1 => reg_532,
        din2 => grp_fu_1737_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1737_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U57 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_11_reg_2121,
        din1 => Weights_load_39_reg_2159,
        din2 => grp_fu_1746_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1746_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U58 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_12_reg_2169,
        din1 => reg_552,
        din2 => grp_fu_1755_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1755_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U59 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_13_reg_2179,
        din1 => Weights_load_41_reg_2214,
        din2 => grp_fu_1764_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1764_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U60 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_547,
        din1 => reg_542,
        din2 => grp_fu_1773_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1773_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U61 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_15_reg_2229,
        din1 => Weights_load_43_reg_2259,
        din2 => grp_fu_1782_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1782_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U62 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_16_reg_2269,
        din1 => reg_557,
        din2 => grp_fu_1791_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1791_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U63 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_17_reg_2279,
        din1 => Weights_load_45_reg_2309,
        din2 => grp_fu_1800_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1800_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U64 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_18_reg_2319,
        din1 => Weights_load_46_reg_2354,
        din2 => grp_fu_1809_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1809_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U65 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv2_load_19_reg_2329,
        din1 => Weights_load_47_reg_2359,
        din2 => grp_fu_1818_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1818_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    indvar_flatten34_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln67_fu_580_p2 = ap_const_lv1_0))) then 
                    indvar_flatten34_fu_160 <= add_ln67_fu_586_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten34_fu_160 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                n_fu_156 <= ap_const_lv4_0;
            elsif (((icmp_ln67_reg_1848 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                n_fu_156 <= select_ln67_1_fu_644_p3;
            end if; 
        end if;
    end process;

    reg_527_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                reg_527 <= OutPadConv2_q1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_527 <= OutPadConv2_q0;
            end if; 
        end if;
    end process;

    reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_532 <= Weights_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_532 <= Weights_q1;
            end if; 
        end if;
    end process;

    reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    reg_537 <= OutPadConv2_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_537 <= OutPadConv2_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_542 <= Weights_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                reg_542 <= Weights_q1;
            end if; 
        end if;
    end process;

    reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    reg_547 <= OutPadConv2_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_547 <= OutPadConv2_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    reg_552 <= Weights_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_552 <= Weights_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_557_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    reg_557 <= Weights_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    reg_557 <= Weights_q1;
                end if;
            end if; 
        end if;
    end process;

    y_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln67_fu_580_p2 = ap_const_lv1_0))) then 
                    y_fu_152 <= add_ln75_1_fu_623_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_152 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                OutPadConv2_load_11_reg_2121 <= OutPadConv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                OutPadConv2_load_12_reg_2169 <= OutPadConv2_q1;
                OutPadConv2_load_13_reg_2179 <= OutPadConv2_q0;
                Weights_load_39_reg_2159 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                OutPadConv2_load_15_reg_2229 <= OutPadConv2_q0;
                Weights_load_41_reg_2214 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                OutPadConv2_load_16_reg_2269 <= OutPadConv2_q1;
                OutPadConv2_load_17_reg_2279 <= OutPadConv2_q0;
                Weights_load_43_reg_2259 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                OutPadConv2_load_18_reg_2319 <= OutPadConv2_q1;
                OutPadConv2_load_19_reg_2329 <= OutPadConv2_q0;
                Weights_load_45_reg_2309 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                OutPadConv2_load_9_reg_2081 <= OutPadConv2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                Weights_load_27_reg_2364 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Weights_load_46_reg_2354 <= Weights_q0;
                Weights_load_47_reg_2359 <= Weights_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln67_1_reg_1871 <= add_ln67_1_fu_612_p2;
                icmp_ln67_reg_1848 <= icmp_ln67_fu_580_p2;
                icmp_ln67_reg_1848_pp0_iter1_reg <= icmp_ln67_reg_1848;
                icmp_ln69_reg_1857 <= icmp_ln69_fu_598_p2;
                n_load_reg_1852 <= ap_sig_allocacmp_n_load;
                select_ln67_reg_1862 <= select_ln67_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln77_1_reg_2194 <= add_ln77_1_fu_1144_p2;
                add_ln77_1_reg_2194_pp0_iter1_reg <= add_ln77_1_reg_2194;
                    zext_ln69_2_reg_2136(7 downto 0) <= zext_ln69_2_fu_1066_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    empty_156_reg_1897(7 downto 2) <= empty_156_fu_677_p2(7 downto 2);
                empty_reg_1891 <= empty_fu_649_p1;
                select_ln67_1_reg_1886 <= select_ln67_1_fu_644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                    p_cast86_reg_2042(7 downto 2) <= p_cast86_fu_909_p1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_523 <= OutPadConv2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_45_reg_1952 <= mul_ln75_fu_741_p2(23 downto 8);
                    zext_ln69_3_reg_1928(7 downto 0) <= zext_ln69_3_fu_730_p1(7 downto 0);
            end if;
        end if;
    end process;
    empty_156_reg_1897(1 downto 0) <= "00";
    zext_ln69_3_reg_1928(8) <= '0';
    p_cast86_reg_2042(1 downto 0) <= "00";
    p_cast86_reg_2042(8) <= '0';
    zext_ln69_2_reg_2136(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    OutConv2_address0 <= zext_ln77_1_fu_1638_p1(11 - 1 downto 0);

    OutConv2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OutConv2_ce0 <= ap_const_logic_1;
        else 
            OutConv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    OutConv2_d0 <= 
        ap_const_lv16_0 when (tmp_fu_1630_p3(0) = '1') else 
        add_ln77_2_fu_1642_p2;

    OutConv2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            OutConv2_we0 <= ap_const_logic_1;
        else 
            OutConv2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, zext_ln75_1_fu_629_p1, ap_block_pp0_stage1, zext_ln75_5_fu_720_p1, ap_block_pp0_stage2, zext_ln75_9_fu_801_p1, ap_block_pp0_stage3, zext_ln75_13_fu_849_p1, ap_block_pp0_stage4, zext_ln75_17_fu_904_p1, ap_block_pp0_stage5, zext_ln75_21_fu_974_p1, ap_block_pp0_stage6, zext_ln75_25_fu_1039_p1, ap_block_pp0_stage7, zext_ln75_29_fu_1130_p1, ap_block_pp0_stage8, zext_ln75_33_fu_1210_p1, ap_block_pp0_stage9, zext_ln75_37_fu_1275_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                OutPadConv2_address0 <= zext_ln75_37_fu_1275_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                OutPadConv2_address0 <= zext_ln75_33_fu_1210_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                OutPadConv2_address0 <= zext_ln75_29_fu_1130_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                OutPadConv2_address0 <= zext_ln75_25_fu_1039_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                OutPadConv2_address0 <= zext_ln75_21_fu_974_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OutPadConv2_address0 <= zext_ln75_17_fu_904_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OutPadConv2_address0 <= zext_ln75_13_fu_849_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv2_address0 <= zext_ln75_9_fu_801_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv2_address0 <= zext_ln75_5_fu_720_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv2_address0 <= zext_ln75_1_fu_629_p1(10 - 1 downto 0);
            else 
                OutPadConv2_address0 <= "XXXXXXXXXX";
            end if;
        else 
            OutPadConv2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    OutPadConv2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, zext_ln69_1_fu_618_p1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln75_3_fu_710_p1, ap_block_pp0_stage2, zext_ln75_7_fu_790_p1, ap_block_pp0_stage3, zext_ln75_11_fu_839_p1, ap_block_pp0_stage4, zext_ln75_15_fu_894_p1, ap_block_pp0_stage5, zext_ln75_19_fu_964_p1, ap_block_pp0_stage6, zext_ln75_23_fu_1029_p1, ap_block_pp0_stage7, zext_ln75_27_fu_1119_p1, ap_block_pp0_stage8, zext_ln75_31_fu_1200_p1, ap_block_pp0_stage9, zext_ln75_35_fu_1265_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                OutPadConv2_address1 <= zext_ln75_35_fu_1265_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                OutPadConv2_address1 <= zext_ln75_31_fu_1200_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                OutPadConv2_address1 <= zext_ln75_27_fu_1119_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                OutPadConv2_address1 <= zext_ln75_23_fu_1029_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                OutPadConv2_address1 <= zext_ln75_19_fu_964_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OutPadConv2_address1 <= zext_ln75_15_fu_894_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OutPadConv2_address1 <= zext_ln75_11_fu_839_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OutPadConv2_address1 <= zext_ln75_7_fu_790_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OutPadConv2_address1 <= zext_ln75_3_fu_710_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                OutPadConv2_address1 <= zext_ln69_1_fu_618_p1(10 - 1 downto 0);
            else 
                OutPadConv2_address1 <= "XXXXXXXXXX";
            end if;
        else 
            OutPadConv2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    OutPadConv2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv2_ce0 <= ap_const_logic_1;
        else 
            OutPadConv2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OutPadConv2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OutPadConv2_ce1 <= ap_const_logic_1;
        else 
            OutPadConv2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln75_2_fu_700_p1, zext_ln75_4_fu_770_p1, ap_block_pp0_stage2, zext_ln75_8_fu_819_p1, ap_block_pp0_stage3, zext_ln75_12_fu_874_p1, ap_block_pp0_stage4, zext_ln75_16_fu_943_p1, ap_block_pp0_stage5, zext_ln75_20_fu_1009_p1, ap_block_pp0_stage6, zext_ln75_24_fu_1099_p1, ap_block_pp0_stage7, zext_ln75_28_fu_1180_p1, ap_block_pp0_stage8, zext_ln75_32_fu_1245_p1, ap_block_pp0_stage9, zext_ln75_36_fu_1309_p1, ap_block_pp0_stage10, arrayidx17_sum_cast_fu_1333_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0 <= arrayidx17_sum_cast_fu_1333_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            Weights_address0 <= zext_ln75_36_fu_1309_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address0 <= zext_ln75_32_fu_1245_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address0 <= zext_ln75_28_fu_1180_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address0 <= zext_ln75_24_fu_1099_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address0 <= zext_ln75_20_fu_1009_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address0 <= zext_ln75_16_fu_943_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address0 <= zext_ln75_12_fu_874_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address0 <= zext_ln75_8_fu_819_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0 <= zext_ln75_4_fu_770_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0 <= zext_ln75_2_fu_700_p1(14 - 1 downto 0);
        else 
            Weights_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, zext_ln75_fu_689_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln75_6_fu_780_p1, ap_block_pp0_stage3, zext_ln75_10_fu_829_p1, ap_block_pp0_stage4, zext_ln75_14_fu_884_p1, ap_block_pp0_stage5, zext_ln75_18_fu_954_p1, ap_block_pp0_stage6, zext_ln75_22_fu_1019_p1, ap_block_pp0_stage7, zext_ln75_26_fu_1109_p1, ap_block_pp0_stage8, zext_ln75_30_fu_1190_p1, ap_block_pp0_stage9, zext_ln75_34_fu_1255_p1, ap_block_pp0_stage10, zext_ln75_38_fu_1319_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Weights_address1 <= zext_ln75_38_fu_1319_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Weights_address1 <= zext_ln75_34_fu_1255_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Weights_address1 <= zext_ln75_30_fu_1190_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Weights_address1 <= zext_ln75_26_fu_1109_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Weights_address1 <= zext_ln75_22_fu_1019_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Weights_address1 <= zext_ln75_18_fu_954_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Weights_address1 <= zext_ln75_14_fu_884_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Weights_address1 <= zext_ln75_10_fu_829_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Weights_address1 <= zext_ln75_6_fu_780_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Weights_address1 <= zext_ln75_fu_689_p1(14 - 1 downto 0);
            else 
                Weights_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Weights_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce0 <= ap_const_logic_1;
        else 
            Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weights_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Weights_ce1 <= ap_const_logic_1;
        else 
            Weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln67_1_fu_612_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_load) + unsigned(ap_const_lv4_1));
    add_ln67_fu_586_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten34_load) + unsigned(ap_const_lv11_1));
    add_ln75_10_fu_785_p2 <= std_logic_vector(unsigned(select_ln67_reg_1862) + unsigned(ap_const_lv8_4));
    add_ln75_11_fu_814_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_70));
    add_ln75_13_fu_795_p2 <= std_logic_vector(unsigned(zext_ln69_3_fu_730_p1) + unsigned(ap_const_lv9_A4));
    add_ln75_14_fu_824_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_71));
    add_ln75_16_fu_834_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_A5));
    add_ln75_17_fu_869_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_72));
    add_ln75_19_fu_844_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_A6));
    add_ln75_1_fu_623_p2 <= std_logic_vector(unsigned(select_ln67_fu_604_p3) + unsigned(ap_const_lv8_1));
    add_ln75_20_fu_879_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_73));
    add_ln75_22_fu_889_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_A7));
    add_ln75_23_fu_937_p2 <= std_logic_vector(unsigned(p_cast86_fu_909_p1) + unsigned(ap_const_lv9_74));
    add_ln75_25_fu_899_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_A8));
    add_ln75_26_fu_948_p2 <= std_logic_vector(unsigned(p_cast86_fu_909_p1) + unsigned(ap_const_lv9_75));
    add_ln75_28_fu_959_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_148));
    add_ln75_29_fu_1004_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_76));
    add_ln75_2_fu_694_p2 <= std_logic_vector(unsigned(empty_156_fu_677_p2) + unsigned(ap_const_lv8_6D));
    add_ln75_31_fu_969_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_149));
    add_ln75_32_fu_1014_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_77));
    add_ln75_34_fu_1024_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_14A));
    add_ln75_35_fu_1094_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_78));
    add_ln75_37_fu_1034_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_14B));
    add_ln75_38_fu_1104_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_79));
    add_ln75_40_fu_1114_p2 <= std_logic_vector(unsigned(zext_ln69_3_reg_1928) + unsigned(ap_const_lv9_14C));
    add_ln75_41_fu_1175_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7A));
    add_ln75_43_fu_1124_p2 <= std_logic_vector(unsigned(zext_ln69_2_fu_1066_p1) + unsigned(ap_const_lv10_1EC));
    add_ln75_44_fu_1185_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7B));
    add_ln75_46_fu_1195_p2 <= std_logic_vector(unsigned(zext_ln69_2_reg_2136) + unsigned(ap_const_lv10_1ED));
    add_ln75_47_fu_1240_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7C));
    add_ln75_49_fu_1205_p2 <= std_logic_vector(unsigned(zext_ln69_2_reg_2136) + unsigned(ap_const_lv10_1EE));
    add_ln75_4_fu_705_p2 <= std_logic_vector(unsigned(select_ln67_reg_1862) + unsigned(ap_const_lv8_2));
    add_ln75_50_fu_1250_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7D));
    add_ln75_52_fu_1260_p2 <= std_logic_vector(unsigned(zext_ln69_2_reg_2136) + unsigned(ap_const_lv10_1EF));
    add_ln75_53_fu_1304_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7E));
    add_ln75_55_fu_1270_p2 <= std_logic_vector(unsigned(zext_ln69_2_reg_2136) + unsigned(ap_const_lv10_1F0));
    add_ln75_56_fu_1314_p2 <= std_logic_vector(unsigned(p_cast86_reg_2042) + unsigned(ap_const_lv9_7F));
    add_ln75_5_fu_765_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_6E));
    add_ln75_7_fu_715_p2 <= std_logic_vector(unsigned(select_ln67_reg_1862) + unsigned(ap_const_lv8_3));
    add_ln75_8_fu_775_p2 <= std_logic_vector(unsigned(empty_156_reg_1897) + unsigned(ap_const_lv8_6F));
    add_ln75_fu_683_p2 <= std_logic_vector(unsigned(empty_156_fu_677_p2) + unsigned(ap_const_lv8_6C));
    add_ln77_1_fu_1144_p2 <= std_logic_vector(unsigned(zext_ln77_fu_1140_p1) + unsigned(p_shl15_cast_fu_1051_p1));
    add_ln77_2_fu_1642_p2 <= std_logic_vector(signed(Weights_load_27_reg_2364) + signed(s_fu_1611_p4));
    add_ln77_3_fu_1135_p2 <= std_logic_vector(unsigned(zext_ln69_fu_1062_p1) + unsigned(zext_ln69_3_reg_1928));
    add_ln77_fu_1624_p2 <= std_logic_vector(signed(sext_ln77_fu_1620_p1) + signed(conv_i_i13_i93_i81_fu_1608_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, icmp_ln67_reg_1848)
    begin
        if (((icmp_ln67_reg_1848 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln67_reg_1848_pp0_iter1_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln67_reg_1848_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten34_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten34_fu_160)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten34_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten34_load <= indvar_flatten34_fu_160;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, n_fu_156)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_156;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_152, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_152;
        end if; 
    end process;

    arrayidx17_sum_cast_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx17_sum_fu_1327_p2),64));
    arrayidx17_sum_fu_1327_p2 <= std_logic_vector(unsigned(zext_ln67_fu_1324_p1) + unsigned(ap_const_lv9_10C));
        conv_i_i13_i93_i81_fu_1608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Weights_load_27_reg_2364),17));

    empty_156_fu_677_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_661_p1) + unsigned(p_shl18_cast_fu_673_p1));
    empty_fu_649_p1 <= select_ln67_1_fu_644_p3(3 - 1 downto 0);
    grp_fu_1656_p2 <= (tmp_45_reg_1952 & ap_const_lv8_0);
    grp_fu_1665_p2 <= (tmp_46_fu_912_p4 & ap_const_lv8_0);
    grp_fu_1674_p2 <= (tmp_47_fu_979_p4 & ap_const_lv8_0);
    grp_fu_1683_p2 <= (tmp_48_fu_1069_p4 & ap_const_lv8_0);
    grp_fu_1692_p2 <= (tmp_49_fu_1150_p4 & ap_const_lv8_0);
    grp_fu_1701_p2 <= (tmp_50_fu_1215_p4 & ap_const_lv8_0);
    grp_fu_1710_p2 <= (tmp_51_fu_1280_p4 & ap_const_lv8_0);
    grp_fu_1719_p2 <= (tmp_52_fu_1338_p4 & ap_const_lv8_0);
    grp_fu_1728_p2 <= (tmp_53_fu_1363_p4 & ap_const_lv8_0);
    grp_fu_1737_p2 <= (tmp_54_fu_1386_p4 & ap_const_lv8_0);
    grp_fu_1746_p2 <= (tmp_55_fu_1410_p4 & ap_const_lv8_0);
    grp_fu_1755_p2 <= (tmp_56_fu_1433_p4 & ap_const_lv8_0);
    grp_fu_1764_p2 <= (tmp_57_fu_1458_p4 & ap_const_lv8_0);
    grp_fu_1773_p2 <= (tmp_58_fu_1481_p4 & ap_const_lv8_0);
    grp_fu_1782_p2 <= (tmp_59_fu_1505_p4 & ap_const_lv8_0);
    grp_fu_1791_p2 <= (tmp_60_fu_1528_p4 & ap_const_lv8_0);
    grp_fu_1800_p2 <= (tmp_61_fu_1551_p4 & ap_const_lv8_0);
    grp_fu_1809_p2 <= (tmp_62_fu_1574_p4 & ap_const_lv8_0);
    grp_fu_1818_p2 <= (tmp_63_fu_1591_p4 & ap_const_lv8_0);
    icmp_ln67_fu_580_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten34_load = ap_const_lv11_500) else "0";
    icmp_ln69_fu_598_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv8_A0) else "0";
    p_cast86_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_156_reg_1897),9));
    p_shl10_fu_1055_p3 <= (empty_reg_1891 & ap_const_lv5_0);
    p_shl15_cast_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_1044_p3),11));
    p_shl17_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_653_p3),8));
    p_shl18_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_665_p3),8));
    p_shl4_fu_653_p3 <= (empty_fu_649_p1 & ap_const_lv4_0);
    p_shl7_fu_665_p3 <= (empty_fu_649_p1 & ap_const_lv2_0);
    p_shl8_fu_1044_p3 <= (empty_reg_1891 & ap_const_lv7_0);
    s_fu_1611_p1 <= grp_fu_1818_p3;
    s_fu_1611_p4 <= s_fu_1611_p1(23 downto 8);
    select_ln67_1_fu_644_p3 <= 
        add_ln67_1_reg_1871 when (icmp_ln69_reg_1857(0) = '1') else 
        n_load_reg_1852;
    select_ln67_fu_604_p3 <= 
        ap_const_lv8_0 when (icmp_ln69_fu_598_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
        sext_ln77_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_fu_1611_p4),17));

    tmp_46_fu_912_p1 <= grp_fu_1656_p3;
    tmp_46_fu_912_p4 <= tmp_46_fu_912_p1(23 downto 8);
    tmp_47_fu_979_p1 <= grp_fu_1665_p3;
    tmp_47_fu_979_p4 <= tmp_47_fu_979_p1(23 downto 8);
    tmp_48_fu_1069_p1 <= grp_fu_1674_p3;
    tmp_48_fu_1069_p4 <= tmp_48_fu_1069_p1(23 downto 8);
    tmp_49_fu_1150_p1 <= grp_fu_1683_p3;
    tmp_49_fu_1150_p4 <= tmp_49_fu_1150_p1(23 downto 8);
    tmp_50_fu_1215_p1 <= grp_fu_1692_p3;
    tmp_50_fu_1215_p4 <= tmp_50_fu_1215_p1(23 downto 8);
    tmp_51_fu_1280_p1 <= grp_fu_1701_p3;
    tmp_51_fu_1280_p4 <= tmp_51_fu_1280_p1(23 downto 8);
    tmp_52_fu_1338_p1 <= grp_fu_1710_p3;
    tmp_52_fu_1338_p4 <= tmp_52_fu_1338_p1(23 downto 8);
    tmp_53_fu_1363_p1 <= grp_fu_1719_p3;
    tmp_53_fu_1363_p4 <= tmp_53_fu_1363_p1(23 downto 8);
    tmp_54_fu_1386_p1 <= grp_fu_1728_p3;
    tmp_54_fu_1386_p4 <= tmp_54_fu_1386_p1(23 downto 8);
    tmp_55_fu_1410_p1 <= grp_fu_1737_p3;
    tmp_55_fu_1410_p4 <= tmp_55_fu_1410_p1(23 downto 8);
    tmp_56_fu_1433_p1 <= grp_fu_1746_p3;
    tmp_56_fu_1433_p4 <= tmp_56_fu_1433_p1(23 downto 8);
    tmp_57_fu_1458_p1 <= grp_fu_1755_p3;
    tmp_57_fu_1458_p4 <= tmp_57_fu_1458_p1(23 downto 8);
    tmp_58_fu_1481_p1 <= grp_fu_1764_p3;
    tmp_58_fu_1481_p4 <= tmp_58_fu_1481_p1(23 downto 8);
    tmp_59_fu_1505_p1 <= grp_fu_1773_p3;
    tmp_59_fu_1505_p4 <= tmp_59_fu_1505_p1(23 downto 8);
    tmp_60_fu_1528_p1 <= grp_fu_1782_p3;
    tmp_60_fu_1528_p4 <= tmp_60_fu_1528_p1(23 downto 8);
    tmp_61_fu_1551_p1 <= grp_fu_1791_p3;
    tmp_61_fu_1551_p4 <= tmp_61_fu_1551_p1(23 downto 8);
    tmp_62_fu_1574_p1 <= grp_fu_1800_p3;
    tmp_62_fu_1574_p4 <= tmp_62_fu_1574_p1(23 downto 8);
    tmp_63_fu_1591_p1 <= grp_fu_1809_p3;
    tmp_63_fu_1591_p4 <= tmp_63_fu_1591_p1(23 downto 8);
    tmp_fu_1630_p3 <= add_ln77_fu_1624_p2(16 downto 16);
    zext_ln67_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_1_reg_1886),9));
    zext_ln69_1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_fu_604_p3),64));
    zext_ln69_2_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_reg_1862),10));
    zext_ln69_3_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_reg_1862),9));
    zext_ln69_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl10_fu_1055_p3),9));
    zext_ln75_10_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_14_fu_824_p2),64));
    zext_ln75_11_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_16_fu_834_p2),64));
    zext_ln75_12_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_17_fu_869_p2),64));
    zext_ln75_13_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_19_fu_844_p2),64));
    zext_ln75_14_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_20_fu_879_p2),64));
    zext_ln75_15_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_22_fu_889_p2),64));
    zext_ln75_16_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_23_fu_937_p2),64));
    zext_ln75_17_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_25_fu_899_p2),64));
    zext_ln75_18_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_26_fu_948_p2),64));
    zext_ln75_19_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_28_fu_959_p2),64));
    zext_ln75_1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_623_p2),64));
    zext_ln75_20_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_29_fu_1004_p2),64));
    zext_ln75_21_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_31_fu_969_p2),64));
    zext_ln75_22_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_32_fu_1014_p2),64));
    zext_ln75_23_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_34_fu_1024_p2),64));
    zext_ln75_24_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_35_fu_1094_p2),64));
    zext_ln75_25_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_37_fu_1034_p2),64));
    zext_ln75_26_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_38_fu_1104_p2),64));
    zext_ln75_27_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_40_fu_1114_p2),64));
    zext_ln75_28_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_41_fu_1175_p2),64));
    zext_ln75_29_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_43_fu_1124_p2),64));
    zext_ln75_2_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_2_fu_694_p2),64));
    zext_ln75_30_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_44_fu_1185_p2),64));
    zext_ln75_31_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_46_fu_1195_p2),64));
    zext_ln75_32_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_47_fu_1240_p2),64));
    zext_ln75_33_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_49_fu_1205_p2),64));
    zext_ln75_34_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_50_fu_1250_p2),64));
    zext_ln75_35_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_52_fu_1260_p2),64));
    zext_ln75_36_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_53_fu_1304_p2),64));
    zext_ln75_37_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_55_fu_1270_p2),64));
    zext_ln75_38_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_56_fu_1314_p2),64));
    zext_ln75_3_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_4_fu_705_p2),64));
    zext_ln75_4_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_5_fu_765_p2),64));
    zext_ln75_5_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_7_fu_715_p2),64));
    zext_ln75_6_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_8_fu_775_p2),64));
    zext_ln75_7_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_10_fu_785_p2),64));
    zext_ln75_8_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_11_fu_814_p2),64));
    zext_ln75_9_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_13_fu_795_p2),64));
    zext_ln75_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_fu_683_p2),64));
    zext_ln77_1_fu_1638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_1_reg_2194_pp0_iter1_reg),64));
    zext_ln77_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_3_fu_1135_p2),11));
end behav;
