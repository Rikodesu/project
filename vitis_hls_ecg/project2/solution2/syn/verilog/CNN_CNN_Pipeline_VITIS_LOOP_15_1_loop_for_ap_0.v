// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_15_1_loop_for_ap_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        Weights_address1,
        Weights_ce1,
        Weights_q1,
        OutPadConv0_address0,
        OutPadConv0_ce0,
        OutPadConv0_q0,
        OutPadConv0_address1,
        OutPadConv0_ce1,
        OutPadConv0_q1,
        OutConv0_address0,
        OutConv0_ce0,
        OutConv0_we0,
        OutConv0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [15:0] Weights_q0;
output  [13:0] Weights_address1;
output   Weights_ce1;
input  [15:0] Weights_q1;
output  [8:0] OutPadConv0_address0;
output   OutPadConv0_ce0;
input  [15:0] OutPadConv0_q0;
output  [8:0] OutPadConv0_address1;
output   OutPadConv0_ce1;
input  [15:0] OutPadConv0_q1;
output  [10:0] OutConv0_address0;
output   OutConv0_ce0;
output   OutConv0_we0;
output  [15:0] OutConv0_d0;

reg ap_idle;
reg[13:0] Weights_address0;
reg Weights_ce0;
reg[13:0] Weights_address1;
reg Weights_ce1;
reg[8:0] OutPadConv0_address0;
reg OutPadConv0_ce0;
reg[8:0] OutPadConv0_address1;
reg OutPadConv0_ce1;
reg OutConv0_ce0;
reg OutConv0_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln15_reg_696;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [15:0] reg_219;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage2_11001;
reg  signed [15:0] reg_224;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln15_fu_247_p2;
wire   [8:0] select_ln15_fu_271_p3;
reg   [8:0] select_ln15_reg_700;
reg   [8:0] select_ln15_reg_700_pp0_iter1_reg;
reg   [8:0] select_ln15_reg_700_pp0_iter2_reg;
wire   [2:0] select_ln15_1_fu_285_p3;
reg   [2:0] select_ln15_1_reg_708;
reg   [2:0] select_ln15_1_reg_708_pp0_iter1_reg;
wire   [1:0] empty_fu_297_p1;
reg   [1:0] empty_reg_713;
reg   [1:0] empty_reg_713_pp0_iter1_reg;
reg   [1:0] empty_reg_713_pp0_iter2_reg;
wire   [3:0] empty_159_fu_309_p2;
reg   [3:0] empty_159_reg_719;
wire   [4:0] p_cast_fu_351_p1;
reg   [4:0] p_cast_reg_739;
reg   [15:0] tmp_9_reg_750;
reg  signed [15:0] OutPadConv0_load_3_reg_785;
reg  signed [15:0] Weights_load_5_reg_810;
reg  signed [15:0] OutPadConv0_load_4_reg_815;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] p_cast149_fu_315_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln17_fu_320_p1;
wire   [63:0] zext_ln23_2_fu_331_p1;
wire   [63:0] zext_ln23_1_fu_374_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln23_3_fu_395_p1;
wire   [63:0] zext_ln23_4_fu_405_p1;
wire   [63:0] zext_ln23_6_fu_415_p1;
wire   [63:0] zext_ln23_5_fu_433_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln23_7_fu_443_p1;
wire   [63:0] zext_ln23_8_fu_453_p1;
wire   [63:0] arrayidx3_sum_cast_fu_512_p1;
wire   [63:0] zext_ln25_1_fu_619_p1;
reg   [8:0] y_fu_88;
wire   [8:0] add_ln23_1_fu_325_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_y_load;
reg   [2:0] n_1_fu_92;
reg   [2:0] ap_sig_allocacmp_n_1_load;
reg   [10:0] indvar_flatten_fu_96;
wire   [10:0] add_ln15_fu_253_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln17_fu_265_p2;
wire   [2:0] add_ln15_2_fu_279_p2;
wire   [3:0] p_shl2_fu_301_p3;
wire   [3:0] zext_ln15_1_fu_293_p1;
wire   [4:0] add_ln23_fu_368_p2;
wire   [23:0] mul_ln23_fu_362_p2;
wire   [4:0] add_ln23_3_fu_389_p2;
wire   [8:0] add_ln23_4_fu_400_p2;
wire   [8:0] add_ln23_7_fu_410_p2;
wire   [4:0] add_ln23_6_fu_428_p2;
wire   [4:0] add_ln23_9_fu_438_p2;
wire   [8:0] add_ln23_10_fu_448_p2;
wire  signed [23:0] tmp_10_fu_480_p1;
wire   [23:0] grp_fu_639_p3;
wire   [15:0] tmp_10_fu_480_p4;
wire   [4:0] zext_ln15_fu_503_p1;
wire   [4:0] arrayidx3_sum_fu_506_p2;
wire  signed [23:0] tmp_11_fu_517_p1;
wire   [23:0] grp_fu_648_p3;
wire   [15:0] tmp_11_fu_517_p4;
wire  signed [23:0] tmp_12_fu_534_p1;
wire   [23:0] grp_fu_657_p3;
wire   [15:0] tmp_12_fu_534_p4;
wire  signed [15:0] conv_i_i13_i93_i_fu_551_p0;
wire   [9:0] p_shl_fu_555_p3;
wire   [7:0] p_shl1_fu_566_p3;
wire  signed [23:0] s_fu_577_p1;
wire   [23:0] grp_fu_666_p3;
wire  signed [15:0] s_fu_577_p4;
wire  signed [16:0] sext_ln25_fu_586_p1;
wire  signed [16:0] conv_i_i13_i93_i_fu_551_p1;
wire   [16:0] add_ln25_fu_590_p2;
wire   [8:0] zext_ln23_fu_573_p1;
wire   [8:0] add_ln25_3_fu_604_p2;
wire   [10:0] zext_ln25_fu_609_p1;
wire   [10:0] p_shl_cast_fu_562_p1;
wire   [10:0] add_ln25_1_fu_613_p2;
wire  signed [15:0] add_ln25_2_fu_624_p0;
wire   [0:0] tmp_fu_596_p3;
wire   [15:0] add_ln25_2_fu_624_p2;
wire   [23:0] grp_fu_639_p2;
wire   [23:0] grp_fu_648_p2;
wire   [23:0] grp_fu_657_p2;
wire   [23:0] grp_fu_666_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 y_fu_88 = 9'd0;
#0 n_1_fu_92 = 3'd0;
#0 indvar_flatten_fu_96 = 11'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mul_16s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_16s_16s_24_1_1_U3(
    .din0(OutPadConv0_q1),
    .din1(Weights_q1),
    .dout(mul_ln23_fu_362_p2)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_219),
    .din1(Weights_q1),
    .din2(grp_fu_639_p2),
    .ce(1'b1),
    .dout(grp_fu_639_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_219),
    .din1(reg_224),
    .din2(grp_fu_648_p2),
    .ce(1'b1),
    .dout(grp_fu_648_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv0_load_3_reg_785),
    .din1(reg_224),
    .din2(grp_fu_657_p2),
    .ce(1'b1),
    .dout(grp_fu_657_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv0_load_4_reg_815),
    .din1(Weights_load_5_reg_810),
    .din2(grp_fu_666_p2),
    .ce(1'b1),
    .dout(grp_fu_666_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_247_p2 == 1'd0))) begin
            indvar_flatten_fu_96 <= add_ln15_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_247_p2 == 1'd0))) begin
            n_1_fu_92 <= select_ln15_1_fu_285_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            n_1_fu_92 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            reg_219 <= OutPadConv0_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_219 <= OutPadConv0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_224 <= Weights_q1;
    end else if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_224 <= Weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_247_p2 == 1'd0))) begin
            y_fu_88 <= add_ln23_1_fu_325_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_88 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        OutPadConv0_load_3_reg_785 <= OutPadConv0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv0_load_4_reg_815 <= OutPadConv0_q0;
        Weights_load_5_reg_810 <= Weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_159_reg_719 <= empty_159_fu_309_p2;
        empty_reg_713 <= empty_fu_297_p1;
        empty_reg_713_pp0_iter1_reg <= empty_reg_713;
        empty_reg_713_pp0_iter2_reg <= empty_reg_713_pp0_iter1_reg;
        icmp_ln15_reg_696 <= icmp_ln15_fu_247_p2;
        select_ln15_1_reg_708 <= select_ln15_1_fu_285_p3;
        select_ln15_1_reg_708_pp0_iter1_reg <= select_ln15_1_reg_708;
        select_ln15_reg_700 <= select_ln15_fu_271_p3;
        select_ln15_reg_700_pp0_iter1_reg <= select_ln15_reg_700;
        select_ln15_reg_700_pp0_iter2_reg <= select_ln15_reg_700_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_cast_reg_739[3 : 0] <= p_cast_fu_351_p1[3 : 0];
        tmp_9_reg_750 <= {{mul_ln23_fu_362_p2[23:8]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        OutConv0_ce0 = 1'b1;
    end else begin
        OutConv0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        OutConv0_we0 = 1'b1;
    end else begin
        OutConv0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OutPadConv0_address0 = zext_ln23_8_fu_453_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OutPadConv0_address0 = zext_ln23_6_fu_415_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            OutPadConv0_address0 = zext_ln23_2_fu_331_p1;
        end else begin
            OutPadConv0_address0 = 'bx;
        end
    end else begin
        OutPadConv0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OutPadConv0_address1 = zext_ln23_4_fu_405_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            OutPadConv0_address1 = zext_ln17_fu_320_p1;
        end else begin
            OutPadConv0_address1 = 'bx;
        end
    end else begin
        OutPadConv0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OutPadConv0_ce0 = 1'b1;
    end else begin
        OutPadConv0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OutPadConv0_ce1 = 1'b1;
    end else begin
        OutPadConv0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Weights_address0 = arrayidx3_sum_cast_fu_512_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        Weights_address0 = zext_ln23_7_fu_443_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Weights_address0 = zext_ln23_3_fu_395_p1;
    end else begin
        Weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            Weights_address1 = zext_ln23_5_fu_433_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            Weights_address1 = zext_ln23_1_fu_374_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Weights_address1 = p_cast149_fu_315_p1;
        end else begin
            Weights_address1 = 'bx;
        end
    end else begin
        Weights_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Weights_ce0 = 1'b1;
    end else begin
        Weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        Weights_ce1 = 1'b1;
    end else begin
        Weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_696 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n_1_load = 3'd0;
    end else begin
        ap_sig_allocacmp_n_1_load = n_1_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_y_load = 9'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_88;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv0_address0 = zext_ln25_1_fu_619_p1;

assign OutConv0_d0 = ((tmp_fu_596_p3[0:0] == 1'b1) ? 16'd0 : add_ln25_2_fu_624_p2);

assign add_ln15_2_fu_279_p2 = (ap_sig_allocacmp_n_1_load + 3'd1);

assign add_ln15_fu_253_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln23_10_fu_448_p2 = (select_ln15_reg_700 + 9'd4);

assign add_ln23_1_fu_325_p2 = (select_ln15_fu_271_p3 + 9'd1);

assign add_ln23_3_fu_389_p2 = (p_cast_fu_351_p1 + 5'd2);

assign add_ln23_4_fu_400_p2 = (select_ln15_reg_700 + 9'd2);

assign add_ln23_6_fu_428_p2 = (p_cast_reg_739 + 5'd3);

assign add_ln23_7_fu_410_p2 = (select_ln15_reg_700 + 9'd3);

assign add_ln23_9_fu_438_p2 = (p_cast_reg_739 + 5'd4);

assign add_ln23_fu_368_p2 = (p_cast_fu_351_p1 + 5'd1);

assign add_ln25_1_fu_613_p2 = (zext_ln25_fu_609_p1 + p_shl_cast_fu_562_p1);

assign add_ln25_2_fu_624_p0 = reg_224;

assign add_ln25_2_fu_624_p2 = ($signed(add_ln25_2_fu_624_p0) + $signed(s_fu_577_p4));

assign add_ln25_3_fu_604_p2 = (zext_ln23_fu_573_p1 + select_ln15_reg_700_pp0_iter2_reg);

assign add_ln25_fu_590_p2 = ($signed(sext_ln25_fu_586_p1) + $signed(conv_i_i13_i93_i_fu_551_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign arrayidx3_sum_cast_fu_512_p1 = arrayidx3_sum_fu_506_p2;

assign arrayidx3_sum_fu_506_p2 = ($signed(zext_ln15_fu_503_p1) + $signed(5'd20));

assign conv_i_i13_i93_i_fu_551_p0 = reg_224;

assign conv_i_i13_i93_i_fu_551_p1 = conv_i_i13_i93_i_fu_551_p0;

assign empty_159_fu_309_p2 = (p_shl2_fu_301_p3 + zext_ln15_1_fu_293_p1);

assign empty_fu_297_p1 = select_ln15_1_fu_285_p3[1:0];

assign grp_fu_639_p2 = {{tmp_9_reg_750}, {8'd0}};

assign grp_fu_648_p2 = {{tmp_10_fu_480_p4}, {8'd0}};

assign grp_fu_657_p2 = {{tmp_11_fu_517_p4}, {8'd0}};

assign grp_fu_666_p2 = {{tmp_12_fu_534_p4}, {8'd0}};

assign icmp_ln15_fu_247_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_265_p2 = ((ap_sig_allocacmp_y_load == 9'd320) ? 1'b1 : 1'b0);

assign p_cast149_fu_315_p1 = empty_159_fu_309_p2;

assign p_cast_fu_351_p1 = empty_159_reg_719;

assign p_shl1_fu_566_p3 = {{empty_reg_713_pp0_iter2_reg}, {6'd0}};

assign p_shl2_fu_301_p3 = {{empty_fu_297_p1}, {2'd0}};

assign p_shl_cast_fu_562_p1 = p_shl_fu_555_p3;

assign p_shl_fu_555_p3 = {{empty_reg_713_pp0_iter2_reg}, {8'd0}};

assign s_fu_577_p1 = grp_fu_666_p3;

assign s_fu_577_p4 = {{s_fu_577_p1[23:8]}};

assign select_ln15_1_fu_285_p3 = ((icmp_ln17_fu_265_p2[0:0] == 1'b1) ? add_ln15_2_fu_279_p2 : ap_sig_allocacmp_n_1_load);

assign select_ln15_fu_271_p3 = ((icmp_ln17_fu_265_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_y_load);

assign sext_ln25_fu_586_p1 = s_fu_577_p4;

assign tmp_10_fu_480_p1 = grp_fu_639_p3;

assign tmp_10_fu_480_p4 = {{tmp_10_fu_480_p1[23:8]}};

assign tmp_11_fu_517_p1 = grp_fu_648_p3;

assign tmp_11_fu_517_p4 = {{tmp_11_fu_517_p1[23:8]}};

assign tmp_12_fu_534_p1 = grp_fu_657_p3;

assign tmp_12_fu_534_p4 = {{tmp_12_fu_534_p1[23:8]}};

assign tmp_fu_596_p3 = add_ln25_fu_590_p2[32'd16];

assign zext_ln15_1_fu_293_p1 = select_ln15_1_fu_285_p3;

assign zext_ln15_fu_503_p1 = select_ln15_1_reg_708_pp0_iter1_reg;

assign zext_ln17_fu_320_p1 = select_ln15_fu_271_p3;

assign zext_ln23_1_fu_374_p1 = add_ln23_fu_368_p2;

assign zext_ln23_2_fu_331_p1 = add_ln23_1_fu_325_p2;

assign zext_ln23_3_fu_395_p1 = add_ln23_3_fu_389_p2;

assign zext_ln23_4_fu_405_p1 = add_ln23_4_fu_400_p2;

assign zext_ln23_5_fu_433_p1 = add_ln23_6_fu_428_p2;

assign zext_ln23_6_fu_415_p1 = add_ln23_7_fu_410_p2;

assign zext_ln23_7_fu_443_p1 = add_ln23_9_fu_438_p2;

assign zext_ln23_8_fu_453_p1 = add_ln23_10_fu_448_p2;

assign zext_ln23_fu_573_p1 = p_shl1_fu_566_p3;

assign zext_ln25_1_fu_619_p1 = add_ln25_1_fu_613_p2;

assign zext_ln25_fu_609_p1 = add_ln25_3_fu_604_p2;

always @ (posedge ap_clk) begin
    p_cast_reg_739[4] <= 1'b0;
end

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_15_1_loop_for_ap_0
