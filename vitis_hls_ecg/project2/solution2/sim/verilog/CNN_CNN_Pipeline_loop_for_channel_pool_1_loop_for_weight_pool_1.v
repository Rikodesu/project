// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_1_loop_for_weight_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutConv3_address0,
        OutConv3_ce0,
        OutConv3_q0,
        OutConv3_address1,
        OutConv3_ce1,
        OutConv3_q1,
        OutPool1_address0,
        OutPool1_ce0,
        OutPool1_we0,
        OutPool1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutConv3_address0;
output   OutConv3_ce0;
input  [15:0] OutConv3_q0;
output  [10:0] OutConv3_address1;
output   OutConv3_ce1;
input  [15:0] OutConv3_q1;
output  [9:0] OutPool1_address0;
output   OutPool1_ce0;
output   OutPool1_we0;
output  [15:0] OutPool1_d0;

reg ap_idle;
reg OutConv3_ce0;
reg OutConv3_ce1;
reg OutPool1_ce0;
reg OutPool1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_128_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln30_fu_152_p3;
reg   [6:0] select_ln30_reg_362;
reg   [6:0] select_ln30_reg_362_pp0_iter1_reg;
reg   [6:0] select_ln30_reg_362_pp0_iter2_reg;
wire   [2:0] empty_fu_174_p1;
reg   [2:0] empty_reg_368;
reg   [2:0] empty_reg_368_pp0_iter1_reg;
reg   [2:0] empty_reg_368_pp0_iter2_reg;
wire   [15:0] max_fu_272_p3;
reg   [15:0] max_reg_386;
reg   [15:0] pool_value_3_reg_392;
wire   [63:0] zext_ln38_fu_244_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_1_fu_261_p1;
wire   [63:0] zext_ln42_fu_332_p1;
reg   [6:0] y_fu_60;
wire   [6:0] add_ln43_fu_178_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_y_load;
reg   [3:0] z_fu_64;
wire   [3:0] select_ln30_1_fu_166_p3;
reg   [3:0] ap_sig_allocacmp_z_load;
reg   [9:0] indvar_flatten55_fu_68;
wire   [9:0] add_ln30_fu_134_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten55_load;
wire   [0:0] icmp_ln33_fu_146_p2;
wire   [3:0] add_ln30_1_fu_160_p2;
wire   [9:0] p_shl_fu_199_p3;
wire   [7:0] p_shl5_fu_210_p3;
wire   [10:0] p_shl27_cast_fu_206_p1;
wire   [10:0] p_shl28_cast_fu_217_p1;
wire   [7:0] tmp_s_fu_227_p3;
wire   [10:0] zext_ln37_fu_234_p1;
wire   [10:0] empty_154_fu_221_p2;
wire   [10:0] add_ln37_fu_238_p2;
wire   [10:0] or_ln37_fu_249_p2;
wire   [10:0] add_ln37_1_fu_255_p2;
wire   [0:0] icmp_ln39_fu_266_p2;
wire   [8:0] p_shl6_fu_280_p3;
wire   [6:0] p_shl7_fu_291_p3;
wire   [0:0] icmp_ln39_1_fu_305_p2;
wire   [7:0] zext_ln33_fu_298_p1;
wire   [7:0] zext_ln33_1_fu_302_p1;
wire   [7:0] add_ln41_fu_316_p2;
wire   [9:0] zext_ln41_fu_322_p1;
wire   [9:0] p_shl25_cast_fu_287_p1;
wire   [9:0] add_ln41_1_fu_326_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 y_fu_60 = 7'd0;
#0 z_fu_64 = 4'd0;
#0 indvar_flatten55_fu_68 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten55_fu_68 <= add_ln30_fu_134_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten55_fu_68 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_60 <= add_ln43_fu_178_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_60 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln30_fu_128_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_fu_64 <= select_ln30_1_fu_166_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_fu_64 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_368 <= empty_fu_174_p1;
        empty_reg_368_pp0_iter1_reg <= empty_reg_368;
        select_ln30_reg_362 <= select_ln30_fu_152_p3;
        select_ln30_reg_362_pp0_iter1_reg <= select_ln30_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_reg_368_pp0_iter2_reg <= empty_reg_368_pp0_iter1_reg;
        max_reg_386 <= max_fu_272_p3;
        select_ln30_reg_362_pp0_iter2_reg <= select_ln30_reg_362_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pool_value_3_reg_392 <= OutConv3_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv3_ce0 = 1'b1;
    end else begin
        OutConv3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv3_ce1 = 1'b1;
    end else begin
        OutConv3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool1_ce0 = 1'b1;
    end else begin
        OutPool1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPool1_we0 = 1'b1;
    end else begin
        OutPool1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_128_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten55_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten55_load = indvar_flatten55_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_y_load = 7'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_z_load = 4'd0;
    end else begin
        ap_sig_allocacmp_z_load = z_fu_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv3_address0 = zext_ln38_1_fu_261_p1;

assign OutConv3_address1 = zext_ln38_fu_244_p1;

assign OutPool1_address0 = zext_ln42_fu_332_p1;

assign OutPool1_d0 = ((icmp_ln39_1_fu_305_p2[0:0] == 1'b1) ? pool_value_3_reg_392 : max_reg_386);

assign add_ln30_1_fu_160_p2 = (ap_sig_allocacmp_z_load + 4'd1);

assign add_ln30_fu_134_p2 = (ap_sig_allocacmp_indvar_flatten55_load + 10'd1);

assign add_ln37_1_fu_255_p2 = (zext_ln37_fu_234_p1 + or_ln37_fu_249_p2);

assign add_ln37_fu_238_p2 = (zext_ln37_fu_234_p1 + empty_154_fu_221_p2);

assign add_ln41_1_fu_326_p2 = (zext_ln41_fu_322_p1 + p_shl25_cast_fu_287_p1);

assign add_ln41_fu_316_p2 = (zext_ln33_fu_298_p1 + zext_ln33_1_fu_302_p1);

assign add_ln43_fu_178_p2 = (select_ln30_fu_152_p3 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_154_fu_221_p2 = (p_shl27_cast_fu_206_p1 + p_shl28_cast_fu_217_p1);

assign empty_fu_174_p1 = select_ln30_1_fu_166_p3[2:0];

assign icmp_ln30_fu_128_p2 = ((ap_sig_allocacmp_indvar_flatten55_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_146_p2 = ((ap_sig_allocacmp_y_load == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_305_p2 = (($signed(pool_value_3_reg_392) > $signed(max_reg_386)) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_266_p2 = (($signed(OutConv3_q1) > $signed(16'd62976)) ? 1'b1 : 1'b0);

assign max_fu_272_p3 = ((icmp_ln39_fu_266_p2[0:0] == 1'b1) ? OutConv3_q1 : 16'd62976);

assign or_ln37_fu_249_p2 = (empty_154_fu_221_p2 | 11'd1);

assign p_shl25_cast_fu_287_p1 = p_shl6_fu_280_p3;

assign p_shl27_cast_fu_206_p1 = p_shl_fu_199_p3;

assign p_shl28_cast_fu_217_p1 = p_shl5_fu_210_p3;

assign p_shl5_fu_210_p3 = {{empty_reg_368}, {5'd0}};

assign p_shl6_fu_280_p3 = {{empty_reg_368_pp0_iter2_reg}, {6'd0}};

assign p_shl7_fu_291_p3 = {{empty_reg_368_pp0_iter2_reg}, {4'd0}};

assign p_shl_fu_199_p3 = {{empty_reg_368}, {7'd0}};

assign select_ln30_1_fu_166_p3 = ((icmp_ln33_fu_146_p2[0:0] == 1'b1) ? add_ln30_1_fu_160_p2 : ap_sig_allocacmp_z_load);

assign select_ln30_fu_152_p3 = ((icmp_ln33_fu_146_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_y_load);

assign tmp_s_fu_227_p3 = {{select_ln30_reg_362}, {1'd0}};

assign zext_ln33_1_fu_302_p1 = select_ln30_reg_362_pp0_iter2_reg;

assign zext_ln33_fu_298_p1 = p_shl7_fu_291_p3;

assign zext_ln37_fu_234_p1 = tmp_s_fu_227_p3;

assign zext_ln38_1_fu_261_p1 = add_ln37_1_fu_255_p2;

assign zext_ln38_fu_244_p1 = add_ln37_fu_238_p2;

assign zext_ln41_fu_322_p1 = add_ln41_fu_316_p2;

assign zext_ln42_fu_332_p1 = add_ln41_1_fu_326_p2;

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_1_loop_for_weight_pool_1
